const { ethers } = require("hardhat");
const fs = require("fs");
const path = require("path");

class MonitoringDashboard {
    constructor() {
        this.contracts = null;
        this.investment = null;
        this.token = null;
        this.provider = null;
    }

    async initialize() {
        console.log("üìä –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ú–û–ù–ò–¢–û–†–ò–ù–ì–û–í–û–ô –ü–ê–ù–ï–õ–ò DEFIMON V2");
        console.log("=".repeat(60));
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
        const contractsPath = path.join(__dirname, "..", "deployed-contracts-v2.json");
        if (!fs.existsSync(contractsPath)) {
            throw new Error("‚ùå –§–∞–π–ª deployed-contracts-v2.json –Ω–µ –Ω–∞–π–¥–µ–Ω");
        }
        
        this.contracts = JSON.parse(fs.readFileSync(contractsPath, "utf8"));
        
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        this.provider = new ethers.providers.JsonRpcProvider(
            process.env.SEPOLIA_RPC_URL || `https://sepolia.infura.io/v3/${process.env.INFURA_API_KEY}`
        );
        
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º
        const DefimonTokenV2 = await ethers.getContractFactory("DefimonTokenV2");
        const DefimonInvestmentV2 = await ethers.getContractFactory("DefimonInvestmentV2");
        
        this.token = DefimonTokenV2.attach(this.contracts.defimonTokenV2);
        this.investment = DefimonInvestmentV2.attach(this.contracts.defimonInvestmentV2);
        
        console.log("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞");
    }

    async getSystemOverview() {
        console.log("\nüìä –û–ë–ó–û–† –°–ò–°–¢–ï–ú–´");
        console.log("=".repeat(40));
        
        // –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
        const tokenPaused = await this.token.paused();
        const investmentPaused = await this.investment.paused();
        
        console.log("üîÑ –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤:");
        console.log(`  Token: ${tokenPaused ? 'üî¥ –ü–†–ò–û–°–¢–ê–ù–û–í–õ–ï–ù' : 'üü¢ –ê–ö–¢–ò–í–ï–ù'}`);
        console.log(`  Investment: ${investmentPaused ? 'üî¥ –ü–†–ò–û–°–¢–ê–ù–û–í–õ–ï–ù' : 'üü¢ –ê–ö–¢–ò–í–ï–ù'}`);
        
        // –ë–∞–ª–∞–Ω—Å—ã
        const tokenBalance = await this.token.balanceOf(this.contracts.defimonInvestmentV2);
        const ethBalance = await this.investment.getContractBalance();
        
        console.log("\nüí∞ –ë–∞–ª–∞–Ω—Å—ã:");
        console.log(`  ETH: ${ethers.utils.formatEther(ethBalance)} ETH`);
        console.log(`  DEFI: ${ethers.utils.formatEther(tokenBalance)} DEFI`);
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        const stats = await this.investment.getContractStats();
        console.log("\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:");
        console.log(`  –ò–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤: ${stats.totalInvestors.toString()}`);
        console.log(`  –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: ${ethers.utils.formatEther(stats.totalTokensDistributed)} DEFI`);
        
        // –õ–∏–º–∏—Ç—ã –∏ –∫—É—Ä—Å
        const limits = await this.investment.getInvestmentLimits();
        console.log("\nüí± –ö—É—Ä—Å –∏ –ª–∏–º–∏—Ç—ã:");
        console.log(`  ETH/USD: $${(limits.currentEthUsdPrice / 100).toFixed(2)}`);
        console.log(`  –ú–∏–Ω. –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è: $${limits.minInvestmentUsd.toString()}`);
        console.log(`  –ú–∞–∫—Å. –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è: $${limits.maxInvestmentUsd.toString()}`);
        console.log(`  –ö—Ä—É–ø–Ω–∞—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è: $${limits.largeInvestmentUsd.toString()}`);
        
        // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
        const coefficient = await this.investment.getCurrentCoefficient();
        let periodName;
        switch (coefficient.period.toString()) {
            case '1': periodName = "MVP (x10)"; break;
            case '2': periodName = "Release (x5)"; break;
            case '3': periodName = "Standard (x1)"; break;
            default: periodName = "Unknown"; break;
        }
        console.log(`  –¢–µ–∫—É—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: ${coefficient.coefficient.toString()} (${periodName})`);
        
        return {
            tokenPaused,
            investmentPaused,
            tokenBalance,
            ethBalance,
            stats,
            limits,
            coefficient
        };
    }

    async getRecentActivity() {
        console.log("\nüìã –ü–û–°–õ–ï–î–ù–Ø–Ø –ê–ö–¢–ò–í–ù–û–°–¢–¨");
        console.log("=".repeat(40));
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏
        const investmentFilter = this.investment.filters.InvestmentMade();
        const investmentEvents = await this.investment.queryFilter(investmentFilter, -100);
        
        console.log(`üí∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ (${investmentEvents.length}):`);
        for (let i = 0; i < Math.min(5, investmentEvents.length); i++) {
            const event = investmentEvents[i];
            const { investor, ethAmount, tokenAmount, coefficient } = event.args;
            const block = await event.getBlock();
            
            console.log(`  ${i + 1}. ${investor.substring(0, 10)}... - ${ethers.utils.formatEther(ethAmount)} ETH (x${coefficient}) - ${new Date(block.timestamp * 1000).toLocaleString()}`);
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –∫—Ä—É–ø–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏
        const largeInvestmentFilter = this.investment.filters.LargeInvestmentRequested();
        const largeInvestmentEvents = await this.investment.queryFilter(largeInvestmentFilter, -100);
        
        console.log(`\nüè¶ –ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –∫—Ä—É–ø–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ (${largeInvestmentEvents.length}):`);
        for (let i = 0; i < Math.min(3, largeInvestmentEvents.length); i++) {
            const event = largeInvestmentEvents[i];
            const { requestId, investor, ethAmount, usdAmount } = event.args;
            const block = await event.getBlock();
            
            console.log(`  ${i + 1}. ${requestId.substring(0, 10)}... - ${investor.substring(0, 10)}... - ${ethers.utils.formatEther(ethAmount)} ETH ($${usdAmount / 100}) - ${new Date(block.timestamp * 1000).toLocaleString()}`);
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã —Ç–æ–∫–µ–Ω–æ–≤
        const transferFilter = this.token.filters.Transfer();
        const transferEvents = await this.token.queryFilter(transferFilter, -100);
        
        console.log(`\nüîÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã —Ç–æ–∫–µ–Ω–æ–≤ (${transferEvents.length}):`);
        for (let i = 0; i < Math.min(5, transferEvents.length); i++) {
            const event = transferEvents[i];
            const { from, to, value } = event.args;
            const block = await event.getBlock();
            
            if (from !== ethers.constants.AddressZero && to !== ethers.constants.AddressZero) {
                console.log(`  ${i + 1}. ${from.substring(0, 10)}... ‚Üí ${to.substring(0, 10)}... - ${ethers.utils.formatEther(value)} DEFI - ${new Date(block.timestamp * 1000).toLocaleString()}`);
            }
        }
        
        return {
            investmentEvents,
            largeInvestmentEvents,
            transferEvents
        };
    }

    async getBlacklistStatus() {
        console.log("\nüö´ –°–¢–ê–¢–£–° –ß–ï–†–ù–û–ì–û –°–ü–ò–°–ö–ê");
        console.log("=".repeat(40));
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
        const tokenBlacklistFilter = this.token.filters.AddressBlacklisted();
        const tokenBlacklistEvents = await this.token.queryFilter(tokenBlacklistFilter, -100);
        
        const investmentBlacklistFilter = this.investment.filters.AddressBlacklisted();
        const investmentBlacklistEvents = await this.investment.queryFilter(investmentBlacklistFilter, -100);
        
        console.log(`ü™ô –°–æ–±—ã—Ç–∏—è —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Ç–æ–∫–µ–Ω–∞ (${tokenBlacklistEvents.length}):`);
        for (let i = 0; i < Math.min(5, tokenBlacklistEvents.length); i++) {
            const event = tokenBlacklistEvents[i];
            const { account, status } = event.args;
            const block = await event.getBlock();
            
            console.log(`  ${i + 1}. ${account.substring(0, 10)}... - ${status ? 'üî¥ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù' : 'üü¢ –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ê–ù'} - ${new Date(block.timestamp * 1000).toLocaleString()}`);
        }
        
        console.log(`\nüí∞ –°–æ–±—ã—Ç–∏—è —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π (${investmentBlacklistEvents.length}):`);
        for (let i = 0; i < Math.min(5, investmentBlacklistEvents.length); i++) {
            const event = investmentBlacklistEvents[i];
            const { account, status } = event.args;
            const block = await event.getBlock();
            
            console.log(`  ${i + 1}. ${account.substring(0, 10)}... - ${status ? 'üî¥ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù' : 'üü¢ –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ê–ù'} - ${new Date(block.timestamp * 1000).toLocaleString()}`);
        }
        
        return {
            tokenBlacklistEvents,
            investmentBlacklistEvents
        };
    }

    async getLargeInvestmentRequests() {
        console.log("\nüè¶ –ó–ê–ü–†–û–°–´ –ù–ê –ö–†–£–ü–ù–´–ï –ò–ù–í–ï–°–¢–ò–¶–ò–ò");
        console.log("=".repeat(40));
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –∫—Ä—É–ø–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏
        const largeInvestmentFilter = this.investment.filters.LargeInvestmentRequested();
        const largeInvestmentEvents = await this.investment.queryFilter(largeInvestmentFilter, -1000);
        
        if (largeInvestmentEvents.length === 0) {
            console.log("üì≠ –ù–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –∫—Ä—É–ø–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏");
            return [];
        }
        
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${largeInvestmentEvents.length} –∑–∞–ø—Ä–æ—Å–æ–≤:`);
        
        for (let i = 0; i < largeInvestmentEvents.length; i++) {
            const event = largeInvestmentEvents[i];
            const { requestId, investor, ethAmount, usdAmount, reason } = event.args;
            const block = await event.getBlock();
            
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞
            const request = await this.investment.getLargeInvestmentRequest(requestId);
            
            const approvalCount = (request.approvedBySigner1 ? 1 : 0) + 
                                 (request.approvedBySigner2 ? 1 : 0) + 
                                 (request.approvedBySigner3 ? 1 : 0);
            
            let status;
            if (request.executed) {
                status = "‚úÖ –í–´–ü–û–õ–ù–ï–ù";
            } else if (approvalCount >= 2) {
                status = "‚ö†Ô∏è  –ì–û–¢–û–í –ö –í–´–ü–û–õ–ù–ï–ù–ò–Æ";
            } else {
                status = `‚è≥ –û–ñ–ò–î–ê–ï–¢ (${approvalCount}/3)`;
            }
            
            console.log(`\n${i + 1}. Request ID: ${requestId.substring(0, 16)}...`);
            console.log(`   Investor: ${investor.substring(0, 10)}...`);
            console.log(`   Amount: ${ethers.utils.formatEther(ethAmount)} ETH ($${usdAmount / 100})`);
            console.log(`   Reason: ${reason}`);
            console.log(`   Status: ${status}`);
            console.log(`   Date: ${new Date(block.timestamp * 1000).toLocaleString()}`);
        }
        
        return largeInvestmentEvents;
    }

    async getPriceHistory() {
        console.log("\nüí± –ò–°–¢–û–†–ò–Ø –ò–ó–ú–ï–ù–ï–ù–ò–ô –¶–ï–ù–´");
        console.log("=".repeat(40));
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
        const priceFilter = this.investment.filters.EthUsdPriceUpdated();
        const priceEvents = await this.investment.queryFilter(priceFilter, -100);
        
        if (priceEvents.length === 0) {
            console.log("üì≠ –ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω—ã");
            return [];
        }
        
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${priceEvents.length} –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω—ã:`);
        
        for (let i = 0; i < priceEvents.length; i++) {
            const event = priceEvents[i];
            const { oldPrice, newPrice } = event.args;
            const block = await event.getBlock();
            
            const priceChange = ((newPrice - oldPrice) * 100) / oldPrice;
            
            console.log(`\n${i + 1}. ${new Date(block.timestamp * 1000).toLocaleString()}`);
            console.log(`   –°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: $${(oldPrice / 100).toFixed(2)}`);
            console.log(`   –ù–æ–≤–∞—è —Ü–µ–Ω–∞: $${(newPrice / 100).toFixed(2)}`);
            console.log(`   –ò–∑–º–µ–Ω–µ–Ω–∏–µ: ${priceChange > 0 ? '+' : ''}${priceChange.toFixed(2)}%`);
        }
        
        return priceEvents;
    }

    async generateReport() {
        console.log("\nüìÑ –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–ß–ï–¢–ê");
        console.log("=".repeat(40));
        
        const overview = await this.getSystemOverview();
        const activity = await this.getRecentActivity();
        const blacklist = await this.getBlacklistStatus();
        const largeInvestments = await this.getLargeInvestmentRequests();
        const priceHistory = await this.getPriceHistory();
        
        const report = {
            timestamp: new Date().toISOString(),
            overview: {
                tokenPaused: overview.tokenPaused,
                investmentPaused: overview.investmentPaused,
                tokenBalance: ethers.utils.formatEther(overview.tokenBalance),
                ethBalance: ethers.utils.formatEther(overview.ethBalance),
                totalInvestors: overview.stats.totalInvestors.toString(),
                totalTokensDistributed: ethers.utils.formatEther(overview.stats.totalTokensDistributed),
                ethUsdPrice: (overview.limits.currentEthUsdPrice / 100).toFixed(2),
                coefficient: overview.coefficient.coefficient.toString(),
                period: overview.coefficient.period.toString()
            },
            activity: {
                recentInvestments: activity.investmentEvents.length,
                largeInvestmentRequests: activity.largeInvestmentEvents.length,
                recentTransfers: activity.transferEvents.length
            },
            blacklist: {
                tokenBlacklistEvents: blacklist.tokenBlacklistEvents.length,
                investmentBlacklistEvents: blacklist.investmentBlacklistEvents.length
            },
            largeInvestments: {
                totalRequests: largeInvestments.length,
                pendingRequests: largeInvestments.filter(event => {
                    // –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                    return true; // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
                }).length
            },
            priceHistory: {
                totalChanges: priceHistory.length,
                lastChange: priceHistory.length > 0 ? new Date(priceHistory[priceHistory.length - 1].blockNumber * 1000).toISOString() : null
            }
        };
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        const reportPath = path.join(__dirname, "..", "monitoring-report.json");
        fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));
        
        console.log("‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ monitoring-report.json");
        
        return report;
    }

    async run() {
        try {
            await this.initialize();
            
            console.log("\nüöÄ –ó–ê–ü–£–°–ö –ú–û–ù–ò–¢–û–†–ò–ù–ì–û–í–û–ô –ü–ê–ù–ï–õ–ò");
            console.log("=".repeat(60));
            
            await this.getSystemOverview();
            await this.getRecentActivity();
            await this.getBlacklistStatus();
            await this.getLargeInvestmentRequests();
            await this.getPriceHistory();
            await this.generateReport();
            
            console.log("\n‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
            
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏:", error);
        }
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞–Ω–µ–ª—å
if (require.main === module) {
    const dashboard = new MonitoringDashboard();
    dashboard.run();
}

module.exports = { MonitoringDashboard };
