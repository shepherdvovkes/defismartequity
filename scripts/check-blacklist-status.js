const { ethers } = require("hardhat");
const fs = require("fs");
const path = require("path");

async function main() {
    // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    const targetAddress = process.argv[2];
    
    if (!targetAddress) {
        console.error("‚ùå –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:");
        console.error("npx hardhat run scripts/check-blacklist-status.js --network sepolia -- 0x...");
        process.exit(1);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∞–¥—Ä–µ—Å–∞
    if (!ethers.utils.isAddress(targetAddress)) {
        console.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞:", targetAddress);
        process.exit(1);
    }
    
    console.log("üîç –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê –ß–ï–†–ù–û–ì–û –°–ü–ò–°–ö–ê DEFIMON V2");
    console.log("=".repeat(60));
    console.log("Target address:", targetAddress);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
    const contractsPath = path.join(__dirname, "..", "deployed-contracts-v2.json");
    if (!fs.existsSync(contractsPath)) {
        throw new Error("‚ùå –§–∞–π–ª deployed-contracts-v2.json –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }
    
    const contracts = JSON.parse(fs.readFileSync(contractsPath, "utf8"));
    
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç
    const [deployer] = await ethers.getSigners();
    console.log("Deployer:", deployer.address);
    console.log("Balance:", ethers.utils.formatEther(await deployer.getBalance()), "ETH");
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º
    const DefimonTokenV2 = await ethers.getContractFactory("DefimonTokenV2");
    const DefimonInvestmentV2 = await ethers.getContractFactory("DefimonInvestmentV2");
    
    const token = DefimonTokenV2.attach(contracts.defimonTokenV2);
    const investment = DefimonInvestmentV2.attach(contracts.defimonInvestmentV2);
    
    console.log("\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞—Ö:");
    console.log("Token address:", contracts.defimonTokenV2);
    console.log("Investment address:", contracts.defimonInvestmentV2);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ —Ç–æ–∫–µ–Ω–µ
    console.log("\nü™ô –°–¢–ê–¢–£–° –í –¢–û–ö–ï–ù–ï:");
    const isTokenBlacklisted = await token.blacklisted(targetAddress);
    console.log("Blacklist status:", isTokenBlacklisted ? "üî¥ BLACKLISTED" : "üü¢ CLEAR");
    
    const tokenBalance = await token.balanceOf(targetAddress);
    console.log("Token balance:", ethers.utils.formatEther(tokenBalance), "DEFI");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ
    console.log("\nüí∞ –°–¢–ê–¢–£–° –í –ò–ù–í–ï–°–¢–ò–¶–ò–û–ù–ù–û–ú –ö–û–ù–¢–†–ê–ö–¢–ï:");
    const isInvestmentBlacklisted = await investment.blacklisted(targetAddress);
    console.log("Blacklist status:", isInvestmentBlacklisted ? "üî¥ BLACKLISTED" : "üü¢ CLEAR");
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω–≤–µ—Å—Ç–æ—Ä–µ
    const investorInfo = await investment.getInvestorInfo(targetAddress);
    console.log("Investor exists:", investorInfo.exists ? "‚úÖ YES" : "‚ùå NO");
    
    if (investorInfo.exists) {
        console.log("Total invested:", ethers.utils.formatEther(investorInfo.totalInvested), "ETH");
        console.log("Total tokens:", ethers.utils.formatEther(investorInfo.totalTokens), "DEFI");
        console.log("Investment count:", investorInfo.investmentCount.toString());
        console.log("Last investment time:", new Date(investorInfo.lastInvestmentTime * 1000).toISOString());
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
    console.log("\nüìä –õ–ò–ú–ò–¢–´ –ò–ù–í–ï–°–¢–ò–¶–ò–ô:");
    const limits = await investment.getInvestmentLimits();
    console.log("Min investment (USD):", limits.minInvestmentUsd.toString());
    console.log("Max investment (USD):", limits.maxInvestmentUsd.toString());
    console.log("Large investment threshold (USD):", limits.largeInvestmentUsd.toString());
    console.log("Current ETH/USD price:", limits.currentEthUsdPrice.toString());
    console.log("Min investment (ETH):", ethers.utils.formatEther(limits.minInvestmentEth));
    console.log("Max investment (ETH):", ethers.utils.formatEther(limits.maxInvestmentEth));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –∞–¥—Ä–µ—Å –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å
    console.log("\nüîç –ü–†–û–í–ï–†–ö–ê –í–û–ó–ú–û–ñ–ù–û–°–¢–ò –ò–ù–í–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:");
    const canInvest = !isInvestmentBlacklisted && !isTokenBlacklisted;
    console.log("Can invest:", canInvest ? "‚úÖ YES" : "‚ùå NO");
    
    if (!canInvest) {
        console.log("Reasons:");
        if (isInvestmentBlacklisted) console.log("- Address is blacklisted in investment contract");
        if (isTokenBlacklisted) console.log("- Address is blacklisted in token contract");
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
    console.log("\n‚è∏Ô∏è  –°–¢–ê–¢–£–° –ö–û–ù–¢–†–ê–ö–¢–û–í:");
    const tokenPaused = await token.paused();
    const investmentPaused = await investment.paused();
    console.log("Token paused:", tokenPaused ? "üî¥ YES" : "üü¢ NO");
    console.log("Investment paused:", investmentPaused ? "üî¥ YES" : "üü¢ NO");
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∞–Ω—Ç–∞—Ö
    console.log("\nüë• –ü–û–î–ü–ò–°–ê–ù–¢–´ –ú–£–õ–¨–¢–ò–ü–û–î–ü–ò–°–ò:");
    const signers = await investment.getSigners();
    console.log("Signer 1:", signers.signer1Address);
    console.log("Signer 2:", signers.signer2Address);
    console.log("Signer 3:", signers.signer3Address);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞–¥—Ä–µ—Å –ø–æ–¥–ø–∏—Å–∞–Ω—Ç–æ–º
    const isSigner = targetAddress.toLowerCase() === signers.signer1Address.toLowerCase() ||
                    targetAddress.toLowerCase() === signers.signer2Address.toLowerCase() ||
                    targetAddress.toLowerCase() === signers.signer3Address.toLowerCase();
    console.log("Is signer:", isSigner ? "‚úÖ YES" : "‚ùå NO");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞–¥—Ä–µ—Å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
    const tokenOwner = await token.owner();
    const investmentOwner = await investment.owner();
    const isOwner = targetAddress.toLowerCase() === tokenOwner.toLowerCase() ||
                   targetAddress.toLowerCase() === investmentOwner.toLowerCase();
    console.log("Is owner:", isOwner ? "‚úÖ YES" : "‚ùå NO");
    
    // –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
    console.log("\nüìã –ò–¢–û–ì–û–í–´–ô –°–¢–ê–¢–£–°:");
    if (isTokenBlacklisted || isInvestmentBlacklisted) {
        console.log("üî¥ –ê–î–†–ï–° –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù");
        console.log("–î–µ–π—Å—Ç–≤–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã:");
        console.log("- –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ");
        console.log("- –ü–µ—Ä–µ–≤–æ–¥ —Ç–æ–∫–µ–Ω–æ–≤");
        console.log("- –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤");
    } else if (tokenPaused || investmentPaused) {
        console.log("üü° –ö–û–ù–¢–†–ê–ö–¢–´ –ü–†–ò–û–°–¢–ê–ù–û–í–õ–ï–ù–´");
        console.log("–î–µ–π—Å—Ç–≤–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–æ —Å–Ω—è—Ç–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∏");
    } else {
        console.log("üü¢ –ê–î–†–ï–° –ê–ö–¢–ò–í–ï–ù");
        console.log("–í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã");
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    const report = {
        timestamp: new Date().toISOString(),
        targetAddress: targetAddress,
        status: {
            tokenBlacklisted: isTokenBlacklisted,
            investmentBlacklisted: isInvestmentBlacklisted,
            tokenPaused: tokenPaused,
            investmentPaused: investmentPaused,
            canInvest: canInvest,
            isSigner: isSigner,
            isOwner: isOwner
        },
        balances: {
            tokenBalance: ethers.utils.formatEther(tokenBalance)
        },
        investorInfo: investorInfo.exists ? {
            totalInvested: ethers.utils.formatEther(investorInfo.totalInvested),
            totalTokens: ethers.utils.formatEther(investorInfo.totalTokens),
            investmentCount: investorInfo.investmentCount.toString(),
            lastInvestmentTime: new Date(investorInfo.lastInvestmentTime * 1000).toISOString()
        } : null,
        limits: {
            minInvestmentUsd: limits.minInvestmentUsd.toString(),
            maxInvestmentUsd: limits.maxInvestmentUsd.toString(),
            largeInvestmentUsd: limits.largeInvestmentUsd.toString(),
            currentEthUsdPrice: limits.currentEthUsdPrice.toString(),
            minInvestmentEth: ethers.utils.formatEther(limits.minInvestmentEth),
            maxInvestmentEth: ethers.utils.formatEther(limits.maxInvestmentEth)
        }
    };
    
    const reportPath = path.join(__dirname, "..", `blacklist-status-${targetAddress}.json`);
    fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));
    console.log(`\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: ${reportPath}`);
}

main()
    .then(() => process.exit(0))
    .catch((error) => {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞:", error);
        process.exit(1);
    });
