const { Defender } = require('@openzeppelin/defender-sdk');
const fs = require('fs');
const path = require('path');

async function setupDefender() {
    console.log('üõ°Ô∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenZeppelin Defender...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–µ–π
    if (!process.env.DEFENDER_API_KEY || !process.env.DEFENDER_API_SECRET) {
        throw new Error('‚ùå DEFENDER_API_KEY –∏ DEFENDER_API_SECRET –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ');
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Defender
    const defender = new Defender({
        apiKey: process.env.DEFENDER_API_KEY,
        apiSecret: process.env.DEFENDER_API_SECRET
    });
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
    const contractsPath = path.join(__dirname, '..', 'deployed-contracts-v2.json');
    if (!fs.existsSync(contractsPath)) {
        throw new Error('‚ùå –§–∞–π–ª deployed-contracts-v2.json –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –¥–µ–ø–ª–æ–π V2 –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤.');
    }
    
    const contracts = JSON.parse(fs.readFileSync(contractsPath, 'utf8'));
    
    console.log('üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤:');
    console.log('- DefimonTokenV2:', contracts.defimonTokenV2);
    console.log('- DefimonInvestmentV2:', contracts.defimonInvestmentV2);
    
    try {
        // 1. –°–æ–∑–¥–∞–µ–º Sentinel –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        console.log('\nüîç –°–æ–∑–¥–∞–Ω–∏–µ Sentinel –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...');
        
        const sentinel = await defender.sentinel.create({
            name: 'DEFIMON V2 Security Monitor',
            network: 'sepolia',
            addresses: [contracts.defimonTokenV2, contracts.defimonInvestmentV2],
            abi: [
                // DefimonTokenV2 events
                'event Transfer(address indexed from, address indexed to, uint256 value)',
                'event TokensTransferred(address indexed from, address indexed to, uint256 amount)',
                'event TokensBurned(address indexed from, uint256 amount)',
                'event AddressBlacklisted(address indexed account, bool status)',
                
                // DefimonInvestmentV2 events
                'event InvestmentMade(address indexed investor, uint256 ethAmount, uint256 tokenAmount, uint256 coefficient, uint256 period)',
                'event WithdrawalRequested(bytes32 indexed requestId, address to, uint256 amount)',
                'event WithdrawalApproved(bytes32 indexed requestId, address signer)',
                'event WithdrawalExecuted(bytes32 indexed requestId, address to, uint256 amount)',
                'event SignerUpdated(address indexed oldSigner, address indexed newSigner, uint8 signerIndex)'
            ],
            conditions: [
                {
                    type: 'event',
                    eventSignature: 'Transfer(address,address,uint256)',
                    expression: 'value > 1000000000000000000000', // > 1000 ETH worth of tokens
                    description: 'Large token transfer detected'
                },
                {
                    type: 'event',
                    eventSignature: 'InvestmentMade(address,uint256,uint256,uint256,uint256)',
                    expression: 'ethAmount > 100000000000000000000', // > 100 ETH
                    description: 'Large investment detected'
                },
                {
                    type: 'event',
                    eventSignature: 'AddressBlacklisted(address,bool)',
                    description: 'Address blacklist status changed'
                },
                {
                    type: 'event',
                    eventSignature: 'SignerUpdated(address,address,uint8)',
                    description: 'Multisig signer updated'
                }
            ],
            notifyConfig: {
                timeoutMs: 0,
                message: 'DEFIMON V2 Security Alert: {{message}}'
            }
        });
        
        console.log('‚úÖ Sentinel —Å–æ–∑–¥–∞–Ω:', sentinel.sentinelId);
        
        // 2. –°–æ–∑–¥–∞–µ–º Autotask –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–∞–ª–∞–Ω—Å–æ–≤
        console.log('\nü§ñ –°–æ–∑–¥–∞–Ω–∏–µ Autotask –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–∞–ª–∞–Ω—Å–æ–≤...');
        
        const autotask = await defender.autotask.create({
            name: 'DEFIMON V2 Balance Monitor',
            description: 'Monitor contract balances and alert if low',
            trigger: {
                type: 'schedule',
                schedule: '0 */6 * * *' // Every 6 hours
            },
            encodedZippedCode: Buffer.from(`
                const { ethers } = require('ethers');
                
                exports.handler = async function(event) {
                    const { Defender } = require('@openzeppelin/defender-sdk');
                    const defender = new Defender(event.credentials);
                    
                    // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
                    const tokenAddress = event.secrets.DEFIMON_TOKEN_V2_ADDRESS;
                    const investmentAddress = event.secrets.DEFIMON_INVESTMENT_V2_ADDRESS;
                    
                    if (!tokenAddress || !investmentAddress) {
                        throw new Error('Contract addresses not configured in secrets');
                    }
                    
                    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä
                    const provider = new ethers.providers.JsonRpcProvider(event.secrets.SEPOLIA_RPC_URL);
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å—ã
                    const tokenBalance = await provider.getBalance(tokenAddress);
                    const investmentBalance = await provider.getBalance(investmentAddress);
                    
                    // –ê–ª–µ—Ä—Ç –µ—Å–ª–∏ –±–∞–ª–∞–Ω—Å –º–µ–Ω—å—à–µ 0.1 ETH
                    const minBalance = ethers.utils.parseEther('0.1');
                    
                    if (tokenBalance.lt(minBalance)) {
                        await defender.sentinel.createAlert({
                            name: 'Low Token Contract Balance',
                            description: \`Token contract balance is low: \${ethers.utils.formatEther(tokenBalance)} ETH\`,
                            severity: 'high',
                            addresses: [tokenAddress]
                        });
                    }
                    
                    if (investmentBalance.lt(minBalance)) {
                        await defender.sentinel.createAlert({
                            name: 'Low Investment Contract Balance',
                            description: \`Investment contract balance is low: \${ethers.utils.formatEther(investmentBalance)} ETH\`,
                            severity: 'high',
                            addresses: [investmentAddress]
                        });
                    }
                    
                    return { 
                        success: true,
                        tokenBalance: ethers.utils.formatEther(tokenBalance),
                        investmentBalance: ethers.utils.formatEther(investmentBalance)
                    };
                };
            `).toString('base64'),
            secrets: {
                DEFIMON_TOKEN_V2_ADDRESS: contracts.defimonTokenV2,
                DEFIMON_INVESTMENT_V2_ADDRESS: contracts.defimonInvestmentV2,
                SEPOLIA_RPC_URL: process.env.SEPOLIA_RPC_URL || 'https://sepolia.infura.io/v3/' + process.env.INFURA_API_KEY
            }
        });
        
        console.log('‚úÖ Autotask —Å–æ–∑–¥–∞–Ω:', autotask.autotaskId);
        
        // 3. –°–æ–∑–¥–∞–µ–º Relayer –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
        console.log('\n‚ö° –°–æ–∑–¥–∞–Ω–∏–µ Relayer –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π...');
        
        const relayer = await defender.relay.create({
            name: 'DEFIMON V2 Emergency Relayer',
            network: 'sepolia',
            minBalance: '1000000000000000000', // 1 ETH
            policies: {
                rateLimitMax: 10,
                rateLimitN: 3600
            }
        });
        
        console.log('‚úÖ Relayer —Å–æ–∑–¥–∞–Ω:', relayer.relayerId);
        
        // 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        const defenderConfig = {
            sentinelId: sentinel.sentinelId,
            autotaskId: autotask.autotaskId,
            relayerId: relayer.relayerId,
            contracts: {
                defimonTokenV2: contracts.defimonTokenV2,
                defimonInvestmentV2: contracts.defimonInvestmentV2
            },
            network: 'sepolia',
            createdAt: new Date().toISOString()
        };
        
        const configPath = path.join(__dirname, '..', 'defender-setup.json');
        fs.writeFileSync(configPath, JSON.stringify(defenderConfig, null, 2));
        
        console.log('\nüéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenZeppelin Defender –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
        console.log('='.repeat(50));
        console.log('Sentinel ID:', sentinel.sentinelId);
        console.log('Autotask ID:', autotask.autotaskId);
        console.log('Relayer ID:', relayer.relayerId);
        console.log('='.repeat(50));
        
        console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
        console.log('1. –î–æ–±–∞–≤—å—Ç–µ Relayer –≤ MetaMask –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π');
        console.log('2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Defender Dashboard');
        console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É Sentinel –∏ Autotask');
        console.log('4. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ Relayer –∫–ª—é—á–∏ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ Defender:', error);
        throw error;
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    setupDefender()
        .then(() => process.exit(0))
        .catch((error) => {
            console.error('‚ùå –û—à–∏–±–∫–∞:', error);
            process.exit(1);
        });
}

module.exports = { setupDefender };
