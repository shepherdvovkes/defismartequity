const { ethers } = require("hardhat");
const fs = require("fs");
const path = require("path");

async function main() {
    console.log("üí∞ –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–†–£–ü–ù–´–ú–ò –ò–ù–í–ï–°–¢–ò–¶–ò–Ø–ú–ò DEFIMON V2");
    console.log("=".repeat(60));
    
    // –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    const action = process.argv[2]; // 'approve', 'reject', 'list', 'status'
    const requestId = process.argv[3];
    
    if (!action) {
        console.error("‚ùå –£–∫–∞–∂–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:");
        console.error("npx hardhat run scripts/emergency-large-investment.js --network sepolia -- approve <requestId>");
        console.error("npx hardhat run scripts/emergency-large-investment.js --network sepolia -- reject <requestId>");
        console.error("npx hardhat run scripts/emergency-large-investment.js --network sepolia -- list");
        console.error("npx hardhat run scripts/emergency-large-investment.js --network sepolia -- status <requestId>");
        process.exit(1);
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
    const contractsPath = path.join(__dirname, "..", "deployed-contracts-v2.json");
    if (!fs.existsSync(contractsPath)) {
        throw new Error("‚ùå –§–∞–π–ª deployed-contracts-v2.json –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }
    
    const contracts = JSON.parse(fs.readFileSync(contractsPath, "utf8"));
    
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç
    const [deployer] = await ethers.getSigners();
    console.log("Deployer:", deployer.address);
    console.log("Balance:", ethers.utils.formatEther(await deployer.getBalance()), "ETH");
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
    const DefimonInvestmentV2 = await ethers.getContractFactory("DefimonInvestmentV2");
    const investment = DefimonInvestmentV2.attach(contracts.defimonInvestmentV2);
    
    console.log("\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ:");
    console.log("Address:", contracts.defimonInvestmentV2);
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∞–Ω—Ç–∞—Ö
    const signers = await investment.getSigners();
    console.log("\nüë• –ü–æ–¥–ø–∏—Å–∞–Ω—Ç—ã –º—É–ª—å—Ç–∏–ø–æ–¥–ø–∏—Å–∏:");
    console.log("Signer 1:", signers.signer1Address);
    console.log("Signer 2:", signers.signer2Address);
    console.log("Signer 3:", signers.signer3Address);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ deployer –ø–æ–¥–ø–∏—Å–∞–Ω—Ç–æ–º
    const isSigner = deployer.address.toLowerCase() === signers.signer1Address.toLowerCase() ||
                    deployer.address.toLowerCase() === signers.signer2Address.toLowerCase() ||
                    deployer.address.toLowerCase() === signers.signer3Address.toLowerCase();
    
    if (!isSigner) {
        console.error("‚ùå Deployer –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∞–Ω—Ç–æ–º –º—É–ª—å—Ç–∏–ø–æ–¥–ø–∏—Å–∏!");
        process.exit(1);
    }
    
    console.log("‚úÖ Deployer —è–≤–ª—è–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∞–Ω—Ç–æ–º");
    
    // –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç—ã –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
    const limits = await investment.getInvestmentLimits();
    console.log("\nüìä –õ–∏–º–∏—Ç—ã –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π:");
    console.log("Min investment (USD):", limits.minInvestmentUsd.toString());
    console.log("Max investment (USD):", limits.maxInvestmentUsd.toString());
    console.log("Large investment threshold (USD):", limits.largeInvestmentUsd.toString());
    console.log("Current ETH/USD price:", limits.currentEthUsdPrice.toString());
    console.log("Min investment (ETH):", ethers.utils.formatEther(limits.minInvestmentEth));
    console.log("Max investment (ETH):", ethers.utils.formatEther(limits.maxInvestmentEth));
    
    switch (action.toLowerCase()) {
        case 'approve':
            await approveLargeInvestment(investment, requestId, deployer);
            break;
        case 'reject':
            await rejectLargeInvestment(investment, requestId, deployer);
            break;
        case 'list':
            await listLargeInvestments(investment);
            break;
        case 'status':
            await checkLargeInvestmentStatus(investment, requestId);
            break;
        default:
            console.error("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", action);
            process.exit(1);
    }
}

async function approveLargeInvestment(investment, requestId, deployer) {
    if (!requestId) {
        console.error("‚ùå –£–∫–∞–∂–∏—Ç–µ requestId –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è:");
        console.error("npx hardhat run scripts/emergency-large-investment.js --network sepolia -- approve <requestId>");
        process.exit(1);
    }
    
    console.log("\n‚úÖ –û–î–û–ë–†–ï–ù–ò–ï –ö–†–£–ü–ù–û–ô –ò–ù–í–ï–°–¢–ò–¶–ò–ò");
    console.log("Request ID:", requestId);
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ
    const request = await investment.getLargeInvestmentRequest(requestId);
    
    if (request.investor === ethers.constants.AddressZero) {
        console.error("‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!");
        process.exit(1);
    }
    
    console.log("\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—Ä–æ—Å–µ:");
    console.log("Investor:", request.investor);
    console.log("ETH Amount:", ethers.utils.formatEther(request.ethAmount));
    console.log("USD Amount:", request.usdAmount.toString());
    console.log("Reason:", request.reason);
    console.log("Timestamp:", new Date(request.timestamp * 1000).toISOString());
    console.log("Executed:", request.executed ? "‚úÖ YES" : "‚ùå NO");
    
    if (request.executed) {
        console.log("‚ö†Ô∏è  –ó–∞–ø—Ä–æ—Å —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω!");
        return;
    }
    
    console.log("\nüë• –°—Ç–∞—Ç—É—Å –æ–¥–æ–±—Ä–µ–Ω–∏–π:");
    console.log("Signer 1:", request.approvedBySigner1 ? "‚úÖ APPROVED" : "‚ùå PENDING");
    console.log("Signer 2:", request.approvedBySigner2 ? "‚úÖ APPROVED" : "‚ùå PENDING");
    console.log("Signer 3:", request.approvedBySigner3 ? "‚úÖ APPROVED" : "‚ùå PENDING");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–¥–æ–±—Ä–∏–ª –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø–æ–¥–ø–∏—Å–∞–Ω—Ç
    const signers = await investment.getSigners();
    let alreadyApproved = false;
    
    if (deployer.address.toLowerCase() === signers.signer1Address.toLowerCase() && request.approvedBySigner1) {
        alreadyApproved = true;
    } else if (deployer.address.toLowerCase() === signers.signer2Address.toLowerCase() && request.approvedBySigner2) {
        alreadyApproved = true;
    } else if (deployer.address.toLowerCase() === signers.signer3Address.toLowerCase() && request.approvedBySigner3) {
        alreadyApproved = true;
    }
    
    if (alreadyApproved) {
        console.log("‚ö†Ô∏è  –í—ã —É–∂–µ –æ–¥–æ–±—Ä–∏–ª–∏ —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å!");
        return;
    }
    
    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    console.log("\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –í—ã –æ–¥–æ–±—Ä—è–µ—Ç–µ –∫—Ä—É–ø–Ω—É—é –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—é!");
    console.log("–ü–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏");
    console.log("–µ—Å–ª–∏ –ø–æ–ª—É—á–∏—Ç –æ–¥–æ–±—Ä–µ–Ω–∏–µ –æ—Ç 2 –∏–∑ 3 –ø–æ–¥–ø–∏—Å–∞–Ω—Ç–æ–≤.");
    
    // –û–¥–æ–±—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å
    console.log("\n‚úÖ –û–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞...");
    const tx = await investment.approveLargeInvestment(requestId);
    console.log("Transaction hash:", tx.hash);
    
    // –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    console.log("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...");
    const receipt = await tx.wait();
    console.log("‚úÖ –ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ–¥–æ–±—Ä–µ–Ω!");
    console.log("Block number:", receipt.blockNumber);
    console.log("Gas used:", receipt.gasUsed.toString());
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
    const newRequest = await investment.getLargeInvestmentRequest(requestId);
    console.log("\nüìä –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –æ–¥–æ–±—Ä–µ–Ω–∏–π:");
    console.log("Signer 1:", newRequest.approvedBySigner1 ? "‚úÖ APPROVED" : "‚ùå PENDING");
    console.log("Signer 2:", newRequest.approvedBySigner2 ? "‚úÖ APPROVED" : "‚ùå PENDING");
    console.log("Signer 3:", newRequest.approvedBySigner3 ? "‚úÖ APPROVED" : "‚ùå PENDING");
    console.log("Executed:", newRequest.executed ? "‚úÖ YES" : "‚ùå NO");
    
    // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    await logAction('APPROVE_LARGE_INVESTMENT', {
        requestId: requestId,
        investor: request.investor,
        ethAmount: ethers.utils.formatEther(request.ethAmount),
        usdAmount: request.usdAmount.toString(),
        reason: request.reason,
        transactionHash: tx.hash,
        blockNumber: receipt.blockNumber,
        gasUsed: receipt.gasUsed.toString()
    });
}

async function rejectLargeInvestment(investment, requestId, deployer) {
    if (!requestId) {
        console.error("‚ùå –£–∫–∞–∂–∏—Ç–µ requestId –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:");
        console.error("npx hardhat run scripts/emergency-large-investment.js --network sepolia -- reject <requestId>");
        process.exit(1);
    }
    
    console.log("\n‚ùå –û–¢–ö–õ–û–ù–ï–ù–ò–ï –ö–†–£–ü–ù–û–ô –ò–ù–í–ï–°–¢–ò–¶–ò–ò");
    console.log("Request ID:", requestId);
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ
    const request = await investment.getLargeInvestmentRequest(requestId);
    
    if (request.investor === ethers.constants.AddressZero) {
        console.error("‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!");
        process.exit(1);
    }
    
    console.log("\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—Ä–æ—Å–µ:");
    console.log("Investor:", request.investor);
    console.log("ETH Amount:", ethers.utils.formatEther(request.ethAmount));
    console.log("USD Amount:", request.usdAmount.toString());
    console.log("Reason:", request.reason);
    console.log("Executed:", request.executed ? "‚úÖ YES" : "‚ùå NO");
    
    if (request.executed) {
        console.log("‚ö†Ô∏è  –ó–∞–ø—Ä–æ—Å —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω, –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ!");
        return;
    }
    
    console.log("\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∫—Ä—É–ø–Ω–æ–π –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏!");
    console.log("–ò–Ω–≤–µ—Å—Ç–æ—Ä –ø–æ–ª—É—á–∏—Ç –≤–æ–∑–≤—Ä–∞—Ç ETH, –Ω–æ —Ç–æ–∫–µ–Ω—ã –Ω–µ –±—É–¥—É—Ç –≤—ã–¥–∞–Ω—ã.");
    
    // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ (–≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ –Ω–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è, —Ç–æ–ª—å–∫–æ –æ–¥–æ–±—Ä–µ–Ω–∏—è)
    await logAction('REJECT_LARGE_INVESTMENT', {
        requestId: requestId,
        investor: request.investor,
        ethAmount: ethers.utils.formatEther(request.ethAmount),
        usdAmount: request.usdAmount.toString(),
        reason: request.reason,
        note: "Rejection logged - investor should receive ETH refund"
    });
    
    console.log("üìù –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –ª–æ–≥–∏");
    console.log("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –°–≤—è–∑–∞—Ç—å—Å—è —Å –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–º –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤");
}

async function listLargeInvestments(investment) {
    console.log("\nüìã –°–ü–ò–°–û–ö –ö–†–£–ü–ù–´–• –ò–ù–í–ï–°–¢–ò–¶–ò–ô");
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
    const requestCounter = await investment.getRequestCounter();
    console.log("Total requests:", requestCounter.toString());
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è LargeInvestmentRequested
    const filter = investment.filters.LargeInvestmentRequested();
    const events = await investment.queryFilter(filter, -1000);
    
    if (events.length === 0) {
        console.log("üì≠ –ù–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –∫—Ä—É–ø–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏");
        return;
    }
    
    console.log(`\nüìä –ù–∞–π–¥–µ–Ω–æ ${events.length} –∑–∞–ø—Ä–æ—Å–æ–≤:`);
    
    for (let i = 0; i < events.length; i++) {
        const event = events[i];
        const { requestId, investor, ethAmount, usdAmount, reason } = event.args;
        
        console.log(`\n${i + 1}. Request ID: ${requestId}`);
        console.log(`   Investor: ${investor}`);
        console.log(`   ETH Amount: ${ethers.utils.formatEther(ethAmount)}`);
        console.log(`   USD Amount: ${usdAmount.toString()}`);
        console.log(`   Reason: ${reason}`);
        console.log(`   Block: ${event.blockNumber}`);
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        const request = await investment.getLargeInvestmentRequest(requestId);
        console.log(`   Status: ${request.executed ? '‚úÖ EXECUTED' : '‚è≥ PENDING'}`);
        console.log(`   Approvals: ${request.approvedBySigner1 ? '1' : '0'}/${request.approvedBySigner2 ? '1' : '0'}/${request.approvedBySigner3 ? '1' : '0'}`);
    }
}

async function checkLargeInvestmentStatus(investment, requestId) {
    if (!requestId) {
        console.error("‚ùå –£–∫–∞–∂–∏—Ç–µ requestId –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:");
        console.error("npx hardhat run scripts/emergency-large-investment.js --network sepolia -- status <requestId>");
        process.exit(1);
    }
    
    console.log("\nüîç –°–¢–ê–¢–£–° –ö–†–£–ü–ù–û–ô –ò–ù–í–ï–°–¢–ò–¶–ò–ò");
    console.log("Request ID:", requestId);
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ
    const request = await investment.getLargeInvestmentRequest(requestId);
    
    if (request.investor === ethers.constants.AddressZero) {
        console.error("‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!");
        process.exit(1);
    }
    
    console.log("\nüìã –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:");
    console.log("Investor:", request.investor);
    console.log("ETH Amount:", ethers.utils.formatEther(request.ethAmount));
    console.log("USD Amount:", request.usdAmount.toString());
    console.log("Reason:", request.reason);
    console.log("Timestamp:", new Date(request.timestamp * 1000).toISOString());
    console.log("Executed:", request.executed ? "‚úÖ YES" : "‚ùå NO");
    
    console.log("\nüë• –°—Ç–∞—Ç—É—Å –æ–¥–æ–±—Ä–µ–Ω–∏–π:");
    console.log("Signer 1:", request.approvedBySigner1 ? "‚úÖ APPROVED" : "‚ùå PENDING");
    console.log("Signer 2:", request.approvedBySigner2 ? "‚úÖ APPROVED" : "‚ùå PENDING");
    console.log("Signer 3:", request.approvedBySigner3 ? "‚úÖ APPROVED" : "‚ùå PENDING");
    
    const approvalCount = (request.approvedBySigner1 ? 1 : 0) + 
                         (request.approvedBySigner2 ? 1 : 0) + 
                         (request.approvedBySigner3 ? 1 : 0);
    
    console.log(`\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å: ${approvalCount}/3 –æ–¥–æ–±—Ä–µ–Ω–∏–π`);
    
    if (request.executed) {
        console.log("‚úÖ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞");
    } else if (approvalCount >= 2) {
        console.log("‚ö†Ô∏è  –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–¥–æ–±—Ä–µ–Ω–∏–π –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, –Ω–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞");
    } else {
        console.log("‚è≥ –û–∂–∏–¥–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–¥–æ–±—Ä–µ–Ω–∏–π");
    }
}

async function logAction(action, data) {
    const logEntry = {
        timestamp: new Date().toISOString(),
        action: action,
        ...data
    };
    
    const logPath = path.join(__dirname, "..", "large-investment-logs.json");
    let logs = [];
    
    if (fs.existsSync(logPath)) {
        logs = JSON.parse(fs.readFileSync(logPath, "utf8"));
    }
    
    logs.push(logEntry);
    fs.writeFileSync(logPath, JSON.stringify(logs, null, 2));
    
    console.log("\nüìÑ –î–µ–π—Å—Ç–≤–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ large-investment-logs.json");
}

main()
    .then(() => process.exit(0))
    .catch((error) => {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∫—Ä—É–ø–Ω—ã–º–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º–∏:", error);
        process.exit(1);
    });
