const { ethers } = require("hardhat");
const fs = require("fs");
const path = require("path");

class SuspiciousActivityMonitor {
    constructor() {
        this.contracts = null;
        this.provider = null;
        this.token = null;
        this.investment = null;
        this.alertThresholds = {
            largeTransfer: ethers.utils.parseEther("1000"), // 1000 ETH worth
            largeInvestment: ethers.utils.parseEther("100"), // 100 ETH
            rapidTransactions: 10, // 10 transactions in 1 hour
            timeWindow: 3600, // 1 hour in seconds
            unusualPattern: 5, // 5 similar transactions
            blacklistActivity: 1, // Any blacklist activity
            largeInvestmentRequest: ethers.utils.parseEther("50"), // 50 ETH
            priceChange: 20 // 20% price change
        };
        this.activityLog = [];
        this.suspiciousAddresses = new Set();
    }

    async initialize() {
        console.log("üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏...");
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
        const contractsPath = path.join(__dirname, "..", "deployed-contracts-v2.json");
        if (!fs.existsSync(contractsPath)) {
            throw new Error("‚ùå –§–∞–π–ª deployed-contracts-v2.json –Ω–µ –Ω–∞–π–¥–µ–Ω");
        }
        
        this.contracts = JSON.parse(fs.readFileSync(contractsPath, "utf8"));
        
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        this.provider = new ethers.providers.JsonRpcProvider(
            process.env.SEPOLIA_RPC_URL || `https://sepolia.infura.io/v3/${process.env.INFURA_API_KEY}`
        );
        
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º
        const DefimonTokenV2 = await ethers.getContractFactory("DefimonTokenV2");
        const DefimonInvestmentV2 = await ethers.getContractFactory("DefimonInvestmentV2");
        
        this.token = DefimonTokenV2.attach(this.contracts.defimonTokenV2);
        this.investment = DefimonInvestmentV2.attach(this.contracts.defimonInvestmentV2);
        
        console.log("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
    }

    async monitorTransfers() {
        console.log("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —Ç–æ–∫–µ–Ω–æ–≤...");
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è Transfer
        const filter = this.token.filters.Transfer();
        const events = await this.token.queryFilter(filter, -1000); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 1000 –±–ª–æ–∫–æ–≤
        
        for (const event of events) {
            const { from, to, value } = event.args;
            const block = await event.getBlock();
            
            const activity = {
                type: 'transfer',
                from: from,
                to: to,
                amount: value.toString(),
                amountFormatted: ethers.utils.formatEther(value),
                blockNumber: event.blockNumber,
                transactionHash: event.transactionHash,
                timestamp: block.timestamp,
                gasPrice: event.gasPrice?.toString() || '0'
            };
            
            this.activityLog.push(activity);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            await this.checkSuspiciousTransfer(activity);
        }
    }

    async monitorInvestments() {
        console.log("üí∞ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π...");
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è InvestmentMade
        const investmentFilter = this.investment.filters.InvestmentMade();
        const investmentEvents = await this.investment.queryFilter(investmentFilter, -1000);
        
        for (const event of investmentEvents) {
            const { investor, ethAmount, tokenAmount, coefficient, period } = event.args;
            const block = await event.getBlock();
            
            const activity = {
                type: 'investment',
                investor: investor,
                ethAmount: ethAmount.toString(),
                ethAmountFormatted: ethers.utils.formatEther(ethAmount),
                tokenAmount: tokenAmount.toString(),
                tokenAmountFormatted: ethers.utils.formatEther(tokenAmount),
                coefficient: coefficient.toString(),
                period: period.toString(),
                blockNumber: event.blockNumber,
                transactionHash: event.transactionHash,
                timestamp: block.timestamp
            };
            
            this.activityLog.push(activity);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            await this.checkSuspiciousInvestment(activity);
        }
        
        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –∫—Ä—É–ø–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏
        const largeInvestmentFilter = this.investment.filters.LargeInvestmentRequested();
        const largeInvestmentEvents = await this.investment.queryFilter(largeInvestmentFilter, -1000);
        
        for (const event of largeInvestmentEvents) {
            const { requestId, investor, ethAmount, usdAmount, reason } = event.args;
            const block = await event.getBlock();
            
            const activity = {
                type: 'large_investment_request',
                requestId: requestId,
                investor: investor,
                ethAmount: ethAmount.toString(),
                ethAmountFormatted: ethers.utils.formatEther(ethAmount),
                usdAmount: usdAmount.toString(),
                reason: reason,
                blockNumber: event.blockNumber,
                transactionHash: event.transactionHash,
                timestamp: block.timestamp
            };
            
            this.activityLog.push(activity);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            await this.checkSuspiciousLargeInvestment(activity);
        }
        
        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –æ–¥–æ–±—Ä–µ–Ω–∏—è –∫—Ä—É–ø–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
        const approvalFilter = this.investment.filters.LargeInvestmentApproved();
        const approvalEvents = await this.investment.queryFilter(approvalFilter, -1000);
        
        for (const event of approvalEvents) {
            const { requestId, signer } = event.args;
            const block = await event.getBlock();
            
            const activity = {
                type: 'large_investment_approval',
                requestId: requestId,
                signer: signer,
                blockNumber: event.blockNumber,
                transactionHash: event.transactionHash,
                timestamp: block.timestamp
            };
            
            this.activityLog.push(activity);
        }
    }

    async checkSuspiciousTransfer(activity) {
        const amount = ethers.BigNumber.from(activity.amount);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫—Ä—É–ø–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥
        if (amount.gte(this.alertThresholds.largeTransfer)) {
            await this.createAlert({
                type: 'LARGE_TRANSFER',
                severity: 'HIGH',
                description: `Large token transfer detected: ${activity.amountFormatted} DEFI`,
                activity: activity,
                recommendation: 'Review transaction and consider blacklisting if suspicious'
            });
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥—ã —Å/–Ω–∞ –Ω—É–ª–µ–≤—ã–µ –∞–¥—Ä–µ—Å–∞
        if (activity.from === '0x0000000000000000000000000000000000000000' || 
            activity.to === '0x0000000000000000000000000000000000000000') {
            await this.createAlert({
                type: 'ZERO_ADDRESS_TRANSFER',
                severity: 'MEDIUM',
                description: 'Transfer involving zero address detected',
                activity: activity,
                recommendation: 'Review transaction for potential issues'
            });
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±—ã—Å—Ç—Ä—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        await this.checkRapidTransactions(activity);
    }

    async checkSuspiciousInvestment(activity) {
        const ethAmount = ethers.BigNumber.from(activity.ethAmount);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫—Ä—É–ø–Ω—É—é –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—é
        if (ethAmount.gte(this.alertThresholds.largeInvestment)) {
            await this.createAlert({
                type: 'LARGE_INVESTMENT',
                severity: 'HIGH',
                description: `Large investment detected: ${activity.ethAmountFormatted} ETH`,
                activity: activity,
                recommendation: 'Review investor and consider additional verification'
            });
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–æ–±—ã—á–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
        if (activity.coefficient !== '10' && activity.coefficient !== '5' && activity.coefficient !== '1') {
            await this.createAlert({
                type: 'UNUSUAL_COEFFICIENT',
                severity: 'MEDIUM',
                description: `Unusual investment coefficient: ${activity.coefficient}`,
                activity: activity,
                recommendation: 'Verify coefficient calculation'
            });
        }
    }
    
    async checkSuspiciousLargeInvestment(activity) {
        const ethAmount = ethers.BigNumber.from(activity.ethAmount);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—á–µ–Ω—å –∫—Ä—É–ø–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
        if (ethAmount.gte(this.alertThresholds.largeInvestmentRequest)) {
            await this.createAlert({
                type: 'LARGE_INVESTMENT_REQUEST',
                severity: 'HIGH',
                description: `Large investment request: ${activity.ethAmountFormatted} ETH (${activity.usdAmount} USD)`,
                activity: activity,
                recommendation: 'Review investor background and investment purpose'
            });
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã
        const suspiciousReasons = ['test', 'hack', 'exploit', 'attack', 'scam'];
        const reason = activity.reason.toLowerCase();
        
        for (const suspicious of suspiciousReasons) {
            if (reason.includes(suspicious)) {
                await this.createAlert({
                    type: 'SUSPICIOUS_INVESTMENT_REASON',
                    severity: 'CRITICAL',
                    description: `Suspicious investment reason: "${activity.reason}"`,
                    activity: activity,
                    recommendation: 'Immediately review and potentially blacklist investor'
                });
                break;
            }
        }
    }
    
    async monitorBlacklistActivity() {
        console.log("üö´ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞...");
        
        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–º —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –≤ —Ç–æ–∫–µ–Ω–µ
        const tokenBlacklistFilter = this.token.filters.AddressBlacklisted();
        const tokenBlacklistEvents = await this.token.queryFilter(tokenBlacklistFilter, -1000);
        
        for (const event of tokenBlacklistEvents) {
            const { account, status } = event.args;
            const block = await event.getBlock();
            
            const activity = {
                type: 'token_blacklist',
                account: account,
                status: status,
                blockNumber: event.blockNumber,
                transactionHash: event.transactionHash,
                timestamp: block.timestamp
            };
            
            this.activityLog.push(activity);
            
            // –õ—é–±–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è
            await this.createAlert({
                type: 'BLACKLIST_ACTIVITY',
                severity: status ? 'HIGH' : 'MEDIUM',
                description: `Token blacklist ${status ? 'added' : 'removed'}: ${account}`,
                activity: activity,
                recommendation: status ? 'Monitor address for suspicious activity' : 'Verify address is safe to unblacklist'
            });
        }
        
        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–º —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –≤ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ
        const investmentBlacklistFilter = this.investment.filters.AddressBlacklisted();
        const investmentBlacklistEvents = await this.investment.queryFilter(investmentBlacklistFilter, -1000);
        
        for (const event of investmentBlacklistEvents) {
            const { account, status } = event.args;
            const block = await event.getBlock();
            
            const activity = {
                type: 'investment_blacklist',
                account: account,
                status: status,
                blockNumber: event.blockNumber,
                transactionHash: event.transactionHash,
                timestamp: block.timestamp
            };
            
            this.activityLog.push(activity);
            
            await this.createAlert({
                type: 'BLACKLIST_ACTIVITY',
                severity: status ? 'HIGH' : 'MEDIUM',
                description: `Investment blacklist ${status ? 'added' : 'removed'}: ${account}`,
                activity: activity,
                recommendation: status ? 'Monitor address for suspicious activity' : 'Verify address is safe to unblacklist'
            });
        }
    }
    
    async monitorPriceChanges() {
        console.log("üí± –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω—ã ETH/USD...");
        
        const priceFilter = this.investment.filters.EthUsdPriceUpdated();
        const priceEvents = await this.investment.queryFilter(priceFilter, -1000);
        
        for (const event of priceEvents) {
            const { oldPrice, newPrice } = event.args;
            const block = await event.getBlock();
            
            const priceChangePercent = ((newPrice - oldPrice) * 100) / oldPrice;
            
            const activity = {
                type: 'price_update',
                oldPrice: oldPrice.toString(),
                newPrice: newPrice.toString(),
                priceChangePercent: priceChangePercent.toString(),
                blockNumber: event.blockNumber,
                transactionHash: event.transactionHash,
                timestamp: block.timestamp
            };
            
            this.activityLog.push(activity);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
            if (Math.abs(priceChangePercent) >= this.alertThresholds.priceChange) {
                await this.createAlert({
                    type: 'SIGNIFICANT_PRICE_CHANGE',
                    severity: 'MEDIUM',
                    description: `Significant ETH/USD price change: ${priceChangePercent.toFixed(2)}% (${oldPrice} -> ${newPrice})`,
                    activity: activity,
                    recommendation: 'Review investment limits and update if necessary'
                });
            }
        }
    }

    async checkRapidTransactions(activity) {
        const now = Math.floor(Date.now() / 1000);
        const timeWindow = this.alertThresholds.timeWindow;
        
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ—Ç —Ç–æ–≥–æ –∂–µ –∞–¥—Ä–µ—Å–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
        const recentTransactions = this.activityLog.filter(log => 
            log.timestamp >= now - timeWindow &&
            (log.from === activity.from || log.to === activity.to)
        );
        
        if (recentTransactions.length >= this.alertThresholds.rapidTransactions) {
            await this.createAlert({
                type: 'RAPID_TRANSACTIONS',
                severity: 'MEDIUM',
                description: `Rapid transactions detected: ${recentTransactions.length} in ${timeWindow/60} minutes`,
                activity: activity,
                recommendation: 'Monitor for potential automated attacks'
            });
        }
    }

    async createAlert(alert) {
        const alertData = {
            ...alert,
            timestamp: new Date().toISOString(),
            id: ethers.utils.id(JSON.stringify(alert))
        };
        
        console.log(`üö® ALERT [${alert.severity}]: ${alert.type}`);
        console.log(`   Description: ${alert.description}`);
        console.log(`   Recommendation: ${alert.recommendation}`);
        console.log(`   Transaction: ${alert.activity.transactionHash}`);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–ª–µ—Ä—Ç
        await this.saveAlert(alertData);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await this.sendNotification(alertData);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–¥—Ä–µ—Å –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö
        if (alert.activity.from) {
            this.suspiciousAddresses.add(alert.activity.from);
        }
        if (alert.activity.to) {
            this.suspiciousAddresses.add(alert.activity.to);
        }
    }

    async saveAlert(alert) {
        const alertsPath = path.join(__dirname, "..", "security-alerts.json");
        let alerts = [];
        
        if (fs.existsSync(alertsPath)) {
            alerts = JSON.parse(fs.readFileSync(alertsPath, "utf8"));
        }
        
        alerts.push(alert);
        fs.writeFileSync(alertsPath, JSON.stringify(alerts, null, 2));
    }

    async sendNotification(alert) {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑:
        // - Telegram Bot
        // - Email
        // - Slack
        // - Discord
        // - SMS
        
        console.log("üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ");
    }

    async generateReport() {
        console.log("\nüìä –û–¢–ß–ï–¢ –û –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û–ô –ê–ö–¢–ò–í–ù–û–°–¢–ò");
        console.log("=".repeat(50));
        
        const now = Math.floor(Date.now() / 1000);
        const last24Hours = this.activityLog.filter(log => log.timestamp >= now - 86400);
        
        console.log(`–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –∑–∞ 24 —á–∞—Å–∞: ${last24Hours.length}`);
        console.log(`–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤: ${this.suspiciousAddresses.size}`);
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
        const transferCount = last24Hours.filter(log => log.type === 'transfer').length;
        const investmentCount = last24Hours.filter(log => log.type === 'investment').length;
        
        console.log(`–ü–µ—Ä–µ–≤–æ–¥–æ–≤: ${transferCount}`);
        console.log(`–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–π: ${investmentCount}`);
        
        // –¢–æ–ø –∞–¥—Ä–µ—Å–æ–≤ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        const addressActivity = {};
        last24Hours.forEach(log => {
            if (log.from) addressActivity[log.from] = (addressActivity[log.from] || 0) + 1;
            if (log.to) addressActivity[log.to] = (addressActivity[log.to] || 0) + 1;
        });
        
        const topAddresses = Object.entries(addressActivity)
            .sort(([,a], [,b]) => b - a)
            .slice(0, 5);
        
        console.log("\nüèÜ –¢–æ–ø-5 –∞–¥—Ä–µ—Å–æ–≤ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:");
        topAddresses.forEach(([address, count]) => {
            console.log(`  ${address}: ${count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
        });
        
        // –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
        if (this.suspiciousAddresses.size > 0) {
            console.log("\n‚ö†Ô∏è  –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∞–¥—Ä–µ—Å–∞:");
            this.suspiciousAddresses.forEach(address => {
                console.log(`  ${address}`);
            });
        }
    }

    async run() {
        try {
            await this.initialize();
            await this.monitorTransfers();
            await this.monitorInvestments();
            await this.monitorBlacklistActivity();
            await this.monitorPriceChanges();
            await this.generateReport();
            
            console.log("\n‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω");
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ:", error);
        }
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
if (require.main === module) {
    const monitor = new SuspiciousActivityMonitor();
    monitor.run();
}

module.exports = { SuspiciousActivityMonitor };
