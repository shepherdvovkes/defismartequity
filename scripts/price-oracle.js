const { ethers } = require("hardhat");
const axios = require("axios");
require("dotenv").config();

class PriceOracle {
  constructor(contractAddress, contractABI) {
    this.contractAddress = contractAddress;
    this.contractABI = contractABI;
    this.updateInterval = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç
    this.maxRetries = 3;
    this.retryDelay = 10000; // 10 —Å–µ–∫—É–Ω–¥
    this.isRunning = false;
    this.lastUpdateTime = null;
    this.lastPrice = null;
  }

  async initialize() {
    try {
      // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É
      const provider = new ethers.providers.JsonRpcProvider(process.env.SEPOLIA_URL);
      const wallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider);
      this.contract = new ethers.Contract(this.contractAddress, this.contractABI, wallet);
      
      console.log("‚úÖ Price Oracle –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
              console.log(`–ö–æ–Ω—Ç—Ä–∞–∫—Ç: ${this.contractAddress}`);
      console.log(`‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${this.updateInterval / 1000} —Å–µ–∫—É–Ω–¥`);
      
      return true;
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ä–∞–∫—É–ª–∞:", error.message);
      return false;
    }
  }

  async getCurrentEthPrice() {
    try {
      const response = await axios.get(
        `https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=usd&precision=2`,
        {
          headers: {
            'x-cg-demo-api-key': process.env.COINGECKO_API_KEY
          },
          timeout: 10000
        }
      );

      if (response.data && response.data.ethereum && response.data.ethereum.usd) {
        const price = response.data.ethereum.usd;
        console.log(`üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ ETH: $${price}`);
        return Math.round(price * 100); // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ü–µ–Ω—Ç—ã
      } else {
        throw new Error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç CoinGecko");
      }
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã ETH:", error.message);
      throw error;
    }
  }

  async updateContractPrice(newPrice) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ü–µ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ (–±–æ–ª–µ–µ —á–µ–º –Ω–∞ 1%)
      if (this.lastPrice) {
        const priceChange = Math.abs(newPrice - this.lastPrice) / this.lastPrice;
        if (priceChange < 0.01) {
          console.log("–¶–µ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –º–µ–Ω–µ–µ —á–µ–º –Ω–∞ 1%, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ");
          return false;
        }
      }

      console.log(`üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ: ${newPrice} —Ü–µ–Ω—Ç–æ–≤ ($${newPrice / 100})`);
      
      const tx = await this.contract.updateEthUsdPrice(newPrice);
      await tx.wait();
      
      this.lastPrice = newPrice;
      this.lastUpdateTime = new Date();
      
      console.log("‚úÖ –¶–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ");
      return true;
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ:", error.message);
      throw error;
    }
  }

  async updatePriceWithRetry() {
    for (let attempt = 1; attempt <= this.maxRetries; attempt++) {
      try {
        const newPrice = await this.getCurrentEthPrice();
        await this.updateContractPrice(newPrice);
        return true;
      } catch (error) {
        console.error(`‚ùå –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${this.maxRetries} –Ω–µ—É–¥–∞—á–Ω–∞:`, error.message);
        
        if (attempt < this.maxRetries) {
          console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ${this.retryDelay / 1000} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...`);
          await new Promise(resolve => setTimeout(resolve, this.retryDelay));
        }
      }
    }
    
    console.error("‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã –∏—Å—á–µ—Ä–ø–∞–Ω—ã");
    return false;
  }

  async start() {
    if (this.isRunning) {
      console.log("‚ö†Ô∏è –û—Ä–∞–∫—É–ª —É–∂–µ –∑–∞–ø—É—â–µ–Ω");
      return;
    }

    console.log("üöÄ –ó–∞–ø—É—Å–∫ Price Oracle...");
    this.isRunning = true;

    // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    await this.updatePriceWithRetry();

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    this.intervalId = setInterval(async () => {
      if (this.isRunning) {
        await this.updatePriceWithRetry();
      }
    }, this.updateInterval);

    console.log("‚úÖ Price Oracle –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç");
  }

  async stop() {
    if (!this.isRunning) {
      console.log("‚ö†Ô∏è –û—Ä–∞–∫—É–ª –Ω–µ –∑–∞–ø—É—â–µ–Ω");
      return;
    }

    console.log("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Price Oracle...");
    this.isRunning = false;
    
    if (this.intervalId) {
      clearInterval(this.intervalId);
      this.intervalId = null;
    }

    console.log("‚úÖ Price Oracle –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
  }

  getStatus() {
    return {
      isRunning: this.isRunning,
      lastUpdateTime: this.lastUpdateTime,
      lastPrice: this.lastPrice,
      updateInterval: this.updateInterval
    };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ—Ä–∞–∫—É–ª–∞
async function startPriceOracle() {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    const contractAddress = process.argv[2];
    if (!contractAddress) {
      throw new Error("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞");
    }

    // ABI –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ updateEthUsdPrice
    const contractABI = [
      "function updateEthUsdPrice(uint256 newPrice) external",
      "function ethUsdPrice() external view returns (uint256)",
      "function getInvestmentLimits() external view returns (uint256 minInvestmentUsd, uint256 maxInvestmentUsd, uint256 largeInvestmentUsd, uint256 currentEthUsdPrice, uint256 minInvestmentEth, uint256 maxInvestmentEth)"
    ];

    const oracle = new PriceOracle(contractAddress, contractABI);
    
    if (await oracle.initialize()) {
      await oracle.start();
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
      process.on('SIGINT', async () => {
        console.log("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...");
        await oracle.stop();
        process.exit(0);
      });

      process.on('SIGTERM', async () => {
        console.log("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...");
        await oracle.stop();
        process.exit(0);
      });
    }
  } catch (error) {
    console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ä–∞–∫—É–ª, –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  startPriceOracle();
}

module.exports = { PriceOracle, startPriceOracle };
