const { PriceOracle } = require('./price-oracle');
const { PriceMonitor } = require('./price-monitor');
const { ethers } = require("hardhat");
require("dotenv").config();

class OracleManager {
  constructor(contractAddress) {
    this.contractAddress = contractAddress;
    this.oracle = null;
    this.monitor = null;
    this.isRunning = false;
  }

  async initialize() {
    try {
      console.log("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Oracle Manager...");
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ä–∞–∫—É–ª
      const contractABI = [
        "function updateEthUsdPrice(uint256 newPrice) external",
        "function ethUsdPrice() external view returns (uint256)",
        "function getPriceInfo() external view returns (uint256 currentPrice, uint256 lastUpdateTime, uint256 updateCount, bool isValid)",
        "function getInvestmentLimits() external view returns (uint256 minInvestmentUsd, uint256 maxInvestmentUsd, uint256 largeInvestmentUsd, uint256 currentEthUsdPrice, uint256 minInvestmentEth, uint256 maxInvestmentEth)"
      ];

      this.oracle = new PriceOracle(this.contractAddress, contractABI);
      this.monitor = new PriceMonitor(this.contractAddress);

      const oracleInitialized = await this.oracle.initialize();
      const monitorInitialized = await this.monitor.initialize();

      if (oracleInitialized && monitorInitialized) {
        console.log("‚úÖ Oracle Manager —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
        return true;
      } else {
        throw new Error("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤");
      }
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Oracle Manager:", error.message);
      return false;
    }
  }

  async start() {
    if (this.isRunning) {
      console.log("‚ö†Ô∏è Oracle Manager —É–∂–µ –∑–∞–ø—É—â–µ–Ω");
      return;
    }

    try {
      console.log("üöÄ –ó–∞–ø—É—Å–∫ Oracle Manager...");
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
      await this.monitor.startMonitoring();
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ä–∞–∫—É–ª
      await this.oracle.start();
      
      this.isRunning = true;
      console.log("‚úÖ Oracle Manager –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç");
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
      this.statusInterval = setInterval(() => {
        this.showStatus();
      }, 5 * 60 * 1000);
      
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Oracle Manager:", error.message);
      throw error;
    }
  }

  async stop() {
    if (!this.isRunning) {
      console.log("‚ö†Ô∏è Oracle Manager –Ω–µ –∑–∞–ø—É—â–µ–Ω");
      return;
    }

    try {
      console.log("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Oracle Manager...");
      
      if (this.oracle) {
        await this.oracle.stop();
      }
      
      if (this.monitor) {
        await this.monitor.stopMonitoring();
      }
      
      if (this.statusInterval) {
        clearInterval(this.statusInterval);
        this.statusInterval = null;
      }
      
      this.isRunning = false;
      console.log("‚úÖ Oracle Manager –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
      
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Oracle Manager:", error.message);
      throw error;
    }
  }

  async showStatus() {
    try {
      console.log("\nüìä === –°–¢–ê–¢–£–° ORACLE MANAGER ===");
      
      if (this.oracle) {
        const oracleStatus = this.oracle.getStatus();
        console.log(`üîß –û—Ä–∞–∫—É–ª: ${oracleStatus.isRunning ? 'üü¢ –†–∞–±–æ—Ç–∞–µ—Ç' : 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
        console.log(`üìà –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${oracleStatus.lastUpdateTime || '–ù–∏–∫–æ–≥–¥–∞'}`);
        console.log(`üí∞ –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${oracleStatus.lastPrice ? `$${oracleStatus.lastPrice / 100}` : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
      }
      
      if (this.monitor) {
        const monitorStatus = this.monitor.getStatus();
        console.log(`üëÅÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: ${monitorStatus.isRunning ? 'üü¢ –†–∞–±–æ—Ç–∞–µ—Ç' : 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
        console.log(`üìä –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω: ${monitorStatus.historySize} –∑–∞–ø–∏—Å–µ–π`);
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
      const provider = new ethers.providers.JsonRpcProvider(process.env.SEPOLIA_URL);
      const contractABI = [
        "function getPriceInfo() external view returns (uint256 currentPrice, uint256 lastUpdateTime, uint256 updateCount, bool isValid)"
      ];
      const contract = new ethers.Contract(this.contractAddress, contractABI, provider);
      
      const priceInfo = await contract.getPriceInfo();
      const lastUpdate = new Date(priceInfo.lastUpdateTime.toNumber() * 1000);
      const timeSinceUpdate = Math.floor((Date.now() - lastUpdate.getTime()) / 1000);
      
      console.log(`üìã –ö–æ–Ω—Ç—Ä–∞–∫—Ç:`);
      console.log(`   –¶–µ–Ω–∞: $${priceInfo.currentPrice.toNumber() / 100}`);
      console.log(`   –û–±–Ω–æ–≤–ª–µ–Ω–∏–π: ${priceInfo.updateCount}`);
      console.log(`   –í–∞–ª–∏–¥–Ω–æ—Å—Ç—å: ${priceInfo.isValid ? '‚úÖ –ê–∫—Ç—É–∞–ª—å–Ω–∞' : '‚ö†Ô∏è –£—Å—Ç–∞—Ä–µ–ª–∞'}`);
      console.log(`   –í—Ä–µ–º—è —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${Math.floor(timeSinceUpdate / 60)} –º–∏–Ω—É—Ç`);
      
      console.log("================================\n");
      
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:", error.message);
    }
  }

  async getContractInfo() {
    try {
      const provider = new ethers.providers.JsonRpcProvider(process.env.SEPOLIA_URL);
      const contractABI = [
        "function getPriceInfo() external view returns (uint256 currentPrice, uint256 lastUpdateTime, uint256 updateCount, bool isValid)",
        "function getInvestmentLimits() external view returns (uint256 minInvestmentUsd, uint256 maxInvestmentUsd, uint256 largeInvestmentUsd, uint256 currentEthUsdPrice, uint256 minInvestmentEth, uint256 maxInvestmentEth)"
      ];
      const contract = new ethers.Contract(this.contractAddress, contractABI, provider);
      
      const [priceInfo, limits] = await Promise.all([
        contract.getPriceInfo(),
        contract.getInvestmentLimits()
      ]);
      
      return {
        price: {
          current: priceInfo.currentPrice.toNumber() / 100,
          lastUpdate: new Date(priceInfo.lastUpdateTime.toNumber() * 1000),
          updateCount: priceInfo.updateCount.toNumber(),
          isValid: priceInfo.isValid
        },
        limits: {
          minUsd: limits.minInvestmentUsd.toNumber(),
          maxUsd: limits.maxInvestmentUsd.toNumber(),
          largeUsd: limits.largeInvestmentUsd.toNumber(),
          minEth: parseFloat(ethers.utils.formatEther(limits.minInvestmentEth)),
          maxEth: parseFloat(ethers.utils.formatEther(limits.maxInvestmentEth))
        }
      };
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ:", error.message);
      throw error;
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Oracle Manager
async function startOracleManager() {
  try {
    const contractAddress = process.argv[2];
    if (!contractAddress) {
      throw new Error("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞");
    }

    const manager = new OracleManager(contractAddress);
    
    if (await manager.initialize()) {
      await manager.start();
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
      await manager.showStatus();
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
      process.on('SIGINT', async () => {
        console.log("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...");
        await manager.stop();
        process.exit(0);
      });

      process.on('SIGTERM', async () => {
        console.log("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...");
        await manager.stop();
        process.exit(0);
      });
    }
  } catch (error) {
    console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º Oracle Manager, –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  startOracleManager();
}

module.exports = { OracleManager, startOracleManager };
