const { ethers } = require("hardhat");
const axios = require("axios");
require("dotenv").config();

class PriceMonitor {
  constructor(contractAddress) {
    this.contractAddress = contractAddress;
    this.quicknodeUrl = process.env.QUICKNODE_API_KEY ? 
      `https://${process.env.QUICKNODE_API_KEY}.ethereum-sepolia.quiknode.pro/` : 
      process.env.SEPOLIA_URL;
    this.monitoringInterval = 2 * 60 * 1000; // 2 –º–∏–Ω—É—Ç—ã
    this.alertThreshold = 5; // 5% –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
    this.isRunning = false;
    this.lastPrice = null;
    this.priceHistory = [];
    this.maxHistorySize = 100;
  }

  async initialize() {
    try {
      // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ QuickNode –¥–ª—è –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      const provider = new ethers.providers.JsonRpcProvider(this.quicknodeUrl);
      const wallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider);
      
      // ABI –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
      const contractABI = [
        "function getPriceInfo() external view returns (uint256 currentPrice, uint256 lastUpdateTime, uint256 updateCount, bool isValid)",
        "function updateEthUsdPrice(uint256 newPrice) external",
        "event EthUsdPriceUpdated(uint256 oldPrice, uint256 newPrice, uint256 timestamp, uint256 updateCount)",
        "event PriceUpdateFailed(string reason, uint256 attemptedPrice)",
        "event PriceValidityWarning(uint256 lastUpdateTime, uint256 currentTime)"
      ];
      
      this.contract = new ethers.Contract(this.contractAddress, contractABI, wallet);
      
      console.log("‚úÖ Price Monitor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
              console.log(`–ö–æ–Ω—Ç—Ä–∞–∫—Ç: ${this.contractAddress}`);
      console.log(`üîó QuickNode URL: ${this.quicknodeUrl.substring(0, 50)}...`);
      console.log(`‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: ${this.monitoringInterval / 1000} —Å–µ–∫—É–Ω–¥`);
      
      return true;
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∞:", error.message);
      return false;
    }
  }

  async getCurrentEthPrice() {
    try {
      const response = await axios.get(
        `https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=usd&precision=2`,
        {
          headers: {
            'x-cg-demo-api-key': process.env.COINGECKO_API_KEY
          },
          timeout: 10000
        }
      );

      if (response.data && response.data.ethereum && response.data.ethereum.usd) {
        return response.data.ethereum.usd;
      } else {
        throw new Error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç CoinGecko");
      }
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã ETH:", error.message);
      throw error;
    }
  }

  async getContractPriceInfo() {
    try {
      const priceInfo = await this.contract.getPriceInfo();
      return {
        currentPrice: priceInfo.currentPrice.toNumber() / 100, // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ —Ü–µ–Ω—Ç–æ–≤
        lastUpdateTime: priceInfo.lastUpdateTime.toNumber(),
        updateCount: priceInfo.updateCount.toNumber(),
        isValid: priceInfo.isValid
      };
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–µ–Ω–µ –∏–∑ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:", error.message);
      throw error;
    }
  }

  calculatePriceChange(currentPrice, previousPrice) {
    if (!previousPrice) return 0;
    return ((currentPrice - previousPrice) / previousPrice) * 100;
  }

  async checkPriceDiscrepancy() {
    try {
      const marketPrice = await this.getCurrentEthPrice();
      const contractInfo = await this.getContractPriceInfo();
      
      const priceDifference = Math.abs(marketPrice - contractInfo.currentPrice);
      const priceDifferencePercent = (priceDifference / marketPrice) * 100;
      
              console.log(`–†—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞: $${marketPrice}`);
        console.log(`–¶–µ–Ω–∞ –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ: $${contractInfo.currentPrice}`);
        console.log(`–†–∞–∑–Ω–∏—Ü–∞: ${priceDifferencePercent.toFixed(2)}%`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ü–µ–Ω—ã –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ
      if (!contractInfo.isValid) {
        const timeSinceUpdate = Math.floor((Date.now() / 1000) - contractInfo.lastUpdateTime);
        console.log(`‚ö†Ô∏è –¶–µ–Ω–∞ –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ —É—Å—Ç–∞—Ä–µ–ª–∞ –Ω–∞ ${timeSinceUpdate} —Å–µ–∫—É–Ω–¥`);
        await this.sendAlert(`–¶–µ–Ω–∞ –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ —É—Å—Ç–∞—Ä–µ–ª–∞ –Ω–∞ ${Math.floor(timeSinceUpdate / 3600)} —á–∞—Å–æ–≤`);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ —Ü–µ–Ω
      if (priceDifferencePercent > this.alertThreshold) {
        console.log(`–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ —Ü–µ–Ω: ${priceDifferencePercent.toFixed(2)}%`);
        await this.sendAlert(`–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ —Ü–µ–Ω: ${priceDifferencePercent.toFixed(2)}%`);
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
      this.priceHistory.push({
        timestamp: Date.now(),
        marketPrice,
        contractPrice: contractInfo.currentPrice,
        difference: priceDifferencePercent
      });
      
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
      if (this.priceHistory.length > this.maxHistorySize) {
        this.priceHistory.shift();
      }
      
      return {
        marketPrice,
        contractPrice: contractInfo.currentPrice,
        difference: priceDifferencePercent,
        isValid: contractInfo.isValid
      };
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è —Ü–µ–Ω:", error.message);
      throw error;
    }
  }

  async sendAlert(message) {
    try {
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (email, Slack, Telegram –∏ —Ç.–¥.)
              console.log(`–ê–õ–ï–†–¢: ${message}`);
      
      // –ü—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –ª–æ–≥ —Ñ–∞–π–ª
      const timestamp = new Date().toISOString();
      const logMessage = `[${timestamp}] ALERT: ${message}\n`;
      
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      console.log(`üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${message}`);
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", error.message);
    }
  }

  async startMonitoring() {
    if (this.isRunning) {
      console.log("‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω");
      return;
    }

    console.log("üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω...");
    this.isRunning = true;

    // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    await this.checkPriceDiscrepancy();

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    this.intervalId = setInterval(async () => {
      if (this.isRunning) {
        try {
          await this.checkPriceDiscrepancy();
        } catch (error) {
          console.error("‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:", error.message);
        }
      }
    }, this.monitoringInterval);

    console.log("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω –∑–∞–ø—É—â–µ–Ω");
  }

  async stopMonitoring() {
    if (!this.isRunning) {
      console.log("‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –∑–∞–ø—É—â–µ–Ω");
      return;
    }

    console.log("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...");
    this.isRunning = false;
    
    if (this.intervalId) {
      clearInterval(this.intervalId);
      this.intervalId = null;
    }

    console.log("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
  }

  getPriceHistory() {
    return this.priceHistory;
  }

  getStatus() {
    return {
      isRunning: this.isRunning,
      lastPrice: this.lastPrice,
      historySize: this.priceHistory.length,
      monitoringInterval: this.monitoringInterval
    };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
async function startPriceMonitoring() {
  try {
    const contractAddress = process.argv[2];
    if (!contractAddress) {
      throw new Error("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞");
    }

    const monitor = new PriceMonitor(contractAddress);
    
    if (await monitor.initialize()) {
      await monitor.startMonitoring();
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
      process.on('SIGINT', async () => {
        console.log("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...");
        await monitor.stopMonitoring();
        process.exit(0);
      });

      process.on('SIGTERM', async () => {
        console.log("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...");
        await monitor.stopMonitoring();
        process.exit(0);
      });
    }
  } catch (error) {
    console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥, –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  startPriceMonitoring();
}

module.exports = { PriceMonitor, startPriceMonitoring };
