const { ethers } = require("hardhat");
const fs = require("fs");
const path = require("path");
const axios = require("axios");

async function main() {
    console.log("üí± –û–ë–ù–û–í–õ–ï–ù–ò–ï –ö–£–†–°–ê ETH/USD DEFIMON V2");
    console.log("=".repeat(60));
    
    // –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    const priceSource = process.argv[2]; // 'manual', 'coingecko', 'coinmarketcap'
    const manualPrice = process.argv[3]; // —Ü–µ–Ω–∞ –≤ USD (—Ç–æ–ª—å–∫–æ –¥–ª—è manual)
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
    const contractsPath = path.join(__dirname, "..", "deployed-contracts-v2.json");
    if (!fs.existsSync(contractsPath)) {
        throw new Error("‚ùå –§–∞–π–ª deployed-contracts-v2.json –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }
    
    const contracts = JSON.parse(fs.readFileSync(contractsPath, "utf8"));
    
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç
    const [deployer] = await ethers.getSigners();
    console.log("Deployer:", deployer.address);
    console.log("Balance:", ethers.utils.formatEther(await deployer.getBalance()), "ETH");
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
    const DefimonInvestmentV2 = await ethers.getContractFactory("DefimonInvestmentV2");
    const investment = DefimonInvestmentV2.attach(contracts.defimonInvestmentV2);
    
    console.log("\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ:");
    console.log("Address:", contracts.defimonInvestmentV2);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å
    const currentPrice = await investment.ethUsdPrice();
    console.log("Current ETH/USD price:", currentPrice.toString(), "USD");
    
    let newPrice;
    
    switch (priceSource?.toLowerCase()) {
        case 'manual':
            if (!manualPrice) {
                console.error("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:");
                console.error("npx hardhat run scripts/emergency-update-price.js --network sepolia -- manual 2500");
                process.exit(1);
            }
            
            newPrice = parseFloat(manualPrice);
            if (isNaN(newPrice) || newPrice <= 0) {
                console.error("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞:", manualPrice);
                process.exit(1);
            }
            
            console.log("üìù –†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã");
            break;
            
        case 'coingecko':
            console.log("ü¶é –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã —Å CoinGecko...");
            newPrice = await getPriceFromCoinGecko();
            break;
            
        case 'coinmarketcap':
            console.log("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã —Å CoinMarketCap...");
            newPrice = await getPriceFromCoinMarketCap();
            break;
            
        default:
            console.error("‚ùå –£–∫–∞–∂–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ —Ü–µ–Ω—ã:");
            console.error("npx hardhat run scripts/emergency-update-price.js --network sepolia -- manual <price>");
            console.error("npx hardhat run scripts/emergency-update-price.js --network sepolia -- coingecko");
            console.error("npx hardhat run scripts/emergency-update-price.js --network sepolia -- coinmarketcap");
            process.exit(1);
    }
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ü–µ–Ω—Ç—ã (—É–º–Ω–æ–∂–∞–µ–º –Ω–∞ 100)
    const newPriceInCents = Math.round(newPrice * 100);
    
    console.log("\nüìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ü–µ–Ω:");
    console.log("Current price:", currentPrice.toString(), "cents ($" + (currentPrice / 100).toFixed(2) + ")");
    console.log("New price:", newPriceInCents.toString(), "cents ($" + newPrice.toFixed(2) + ")");
    
    const priceChange = ((newPriceInCents - currentPrice) * 100) / currentPrice;
    console.log("Price change:", priceChange.toFixed(2) + "%");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if (Math.abs(priceChange) > 20) {
        console.log("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã (>20%)!");
        console.log("–≠—Ç–æ –º–æ–∂–µ—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ –ª–∏–º–∏—Ç—ã –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π.");
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç—ã –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
    const limits = await investment.getInvestmentLimits();
    console.log("\nüìä –¢–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π:");
    console.log("Min investment (USD):", limits.minInvestmentUsd.toString());
    console.log("Max investment (USD):", limits.maxInvestmentUsd.toString());
    console.log("Large investment threshold (USD):", limits.largeInvestmentUsd.toString());
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –ª–∏–º–∏—Ç—ã –≤ ETH
    const newMinEth = (limits.minInvestmentUsd * 100 * 1e18) / newPriceInCents;
    const newMaxEth = (limits.maxInvestmentUsd * 100 * 1e18) / newPriceInCents;
    const newLargeEth = (limits.largeInvestmentUsd * 100 * 1e18) / newPriceInCents;
    
    console.log("\nüìä –ù–æ–≤—ã–µ –ª–∏–º–∏—Ç—ã –≤ ETH:");
    console.log("Min investment (ETH):", ethers.utils.formatEther(newMinEth));
    console.log("Max investment (ETH):", ethers.utils.formatEther(newMaxEth));
    console.log("Large investment threshold (ETH):", ethers.utils.formatEther(newLargeEth));
    
    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    console.log("\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –æ–±–Ω–æ–≤–∏—Ç –∫—É—Ä—Å ETH/USD –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ!");
    console.log("–í—Å–µ –Ω–æ–≤—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –∫—É—Ä—Å.");
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É
    console.log("\nüí± –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞ ETH/USD...");
    const tx = await investment.updateEthUsdPrice(newPriceInCents);
    console.log("Transaction hash:", tx.hash);
    
    // –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    console.log("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...");
    const receipt = await tx.wait();
    console.log("‚úÖ –ö—É—Ä—Å ETH/USD —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!");
    console.log("Block number:", receipt.blockNumber);
    console.log("Gas used:", receipt.gasUsed.toString());
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π –∫—É—Ä—Å
    const updatedPrice = await investment.ethUsdPrice();
    console.log("Updated ETH/USD price:", updatedPrice.toString(), "cents ($" + (updatedPrice / 100).toFixed(2) + ")");
    
    // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    const logEntry = {
        timestamp: new Date().toISOString(),
        action: "UPDATE_ETH_USD_PRICE",
        contract: contracts.defimonInvestmentV2,
        deployer: deployer.address,
        transactionHash: tx.hash,
        blockNumber: receipt.blockNumber,
        gasUsed: receipt.gasUsed.toString(),
        priceChange: {
            oldPrice: currentPrice.toString(),
            newPrice: newPriceInCents.toString(),
            oldPriceUsd: (currentPrice / 100).toFixed(2),
            newPriceUsd: newPrice.toFixed(2),
            changePercent: priceChange.toFixed(2)
        },
        source: priceSource,
        limits: {
            minInvestmentUsd: limits.minInvestmentUsd.toString(),
            maxInvestmentUsd: limits.maxInvestmentUsd.toString(),
            largeInvestmentUsd: limits.largeInvestmentUsd.toString(),
            newMinEth: ethers.utils.formatEther(newMinEth),
            newMaxEth: ethers.utils.formatEther(newMaxEth),
            newLargeEth: ethers.utils.formatEther(newLargeEth)
        }
    };
    
    const logPath = path.join(__dirname, "..", "price-update-logs.json");
    let logs = [];
    
    if (fs.existsSync(logPath)) {
        logs = JSON.parse(fs.readFileSync(logPath, "utf8"));
    }
    
    logs.push(logEntry);
    fs.writeFileSync(logPath, JSON.stringify(logs, null, 2));
    
    console.log("\nüìÑ –î–µ–π—Å—Ç–≤–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ price-update-logs.json");
    
    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    console.log("\nüì¢ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:");
    console.log("1. –£–≤–µ–¥–æ–º–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫—É—Ä—Å–∞");
    console.log("2. –û–±–Ω–æ–≤–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é —Å –Ω–æ–≤—ã–º–∏ –ª–∏–º–∏—Ç–∞–º–∏");
    console.log("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏");
    console.log("4. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã");
    
    console.log("\nüîç –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:");
    console.log("npx hardhat run scripts/check-investment-limits.js --network sepolia");
}

async function getPriceFromCoinGecko() {
    try {
        const response = await axios.get('https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=usd');
        const price = response.data.ethereum.usd;
        console.log("CoinGecko ETH price: $" + price);
        return price;
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã —Å CoinGecko:", error.message);
        throw error;
    }
}

async function getPriceFromCoinMarketCap() {
    try {
        // –î–ª—è CoinMarketCap –Ω—É–∂–µ–Ω API –∫–ª—é—á, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π endpoint
        const response = await axios.get('https://api.coinmarketcap.com/data-api/v3/cryptocurrency/listing?start=1&limit=1&sortBy=market_cap&sortType=desc&convert=USD');
        const ethData = response.data.data.cryptoCurrencyList.find(crypto => crypto.symbol === 'ETH');
        
        if (!ethData) {
            throw new Error("ETH not found in CoinMarketCap response");
        }
        
        const price = ethData.quotes[0].price;
        console.log("CoinMarketCap ETH price: $" + price);
        return price;
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã —Å CoinMarketCap:", error.message);
        console.log("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å CoinGecko –∏–ª–∏ —Ä—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ");
        throw error;
    }
}

main()
    .then(() => process.exit(0))
    .catch((error) => {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—É—Ä—Å–∞:", error);
        process.exit(1);
    });
