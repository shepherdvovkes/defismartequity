const { ethers } = require("hardhat");
const fs = require("fs");
const path = require("path");

class EmergencyManager {
    constructor() {
        this.contracts = null;
        this.investment = null;
        this.token = null;
        this.deployer = null;
    }

    async initialize() {
        console.log("üö® –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –≠–ö–°–¢–†–ï–ù–ù–û–ì–û –ú–ï–ù–ï–î–ñ–ï–†–ê DEFIMON V2");
        console.log("=".repeat(60));
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
        const contractsPath = path.join(__dirname, "..", "deployed-contracts-v2.json");
        if (!fs.existsSync(contractsPath)) {
            throw new Error("‚ùå –§–∞–π–ª deployed-contracts-v2.json –Ω–µ –Ω–∞–π–¥–µ–Ω");
        }
        
        this.contracts = JSON.parse(fs.readFileSync(contractsPath, "utf8"));
        
        // –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç
        const [deployer] = await ethers.getSigners();
        this.deployer = deployer;
        
        console.log("Deployer:", deployer.address);
        console.log("Balance:", ethers.utils.formatEther(await deployer.getBalance()), "ETH");
        
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º
        const DefimonTokenV2 = await ethers.getContractFactory("DefimonTokenV2");
        const DefimonInvestmentV2 = await ethers.getContractFactory("DefimonInvestmentV2");
        
        this.token = DefimonTokenV2.attach(this.contracts.defimonTokenV2);
        this.investment = DefimonInvestmentV2.attach(this.contracts.defimonInvestmentV2);
        
        console.log("\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞—Ö:");
        console.log("Token address:", this.contracts.defimonTokenV2);
        console.log("Investment address:", this.contracts.defimonInvestmentV2);
        
        console.log("‚úÖ –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
    }

    async getSystemStatus() {
        console.log("\nüìä –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´:");
        
        // –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
        const tokenPaused = await this.token.paused();
        const investmentPaused = await this.investment.paused();
        
        console.log("Token paused:", tokenPaused ? "üî¥ YES" : "üü¢ NO");
        console.log("Investment paused:", investmentPaused ? "üî¥ YES" : "üü¢ NO");
        
        // –ë–∞–ª–∞–Ω—Å—ã
        const tokenBalance = await this.token.balanceOf(this.contracts.defimonInvestmentV2);
        const ethBalance = await this.investment.getContractBalance();
        
        console.log("Token balance:", ethers.utils.formatEther(tokenBalance), "DEFI");
        console.log("ETH balance:", ethers.utils.formatEther(ethBalance), "ETH");
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        const stats = await this.investment.getContractStats();
        console.log("Total investors:", stats.totalInvestors.toString());
        
        // –õ–∏–º–∏—Ç—ã
        const limits = await this.investment.getInvestmentLimits();
        console.log("ETH/USD price:", (limits.currentEthUsdPrice / 100).toFixed(2), "USD");
        
        // –ü–æ–¥–ø–∏—Å–∞–Ω—Ç—ã
        const signers = await this.investment.getSigners();
        console.log("\nüë• –ü–æ–¥–ø–∏—Å–∞–Ω—Ç—ã:");
        console.log("Signer 1:", signers.signer1Address);
        console.log("Signer 2:", signers.signer2Address);
        console.log("Signer 3:", signers.signer3Address);
        
        return {
            tokenPaused,
            investmentPaused,
            tokenBalance,
            ethBalance,
            stats,
            limits,
            signers
        };
    }

    async emergencyPause() {
        console.log("\nüõë –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –ü–†–ò–û–°–¢–ê–ù–û–í–ö–ê –°–ò–°–¢–ï–ú–´");
        
        const status = await this.getSystemStatus();
        
        if (status.tokenPaused && status.investmentPaused) {
            console.log("‚ö†Ô∏è  –°–∏—Å—Ç–µ–º–∞ —É–∂–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!");
            return;
        }
        
        console.log("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏!");
        
        const promises = [];
        
        if (!status.tokenPaused) {
            console.log("–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞...");
            promises.push(this.token.pause());
        }
        
        if (!status.investmentPaused) {
            console.log("–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π...");
            promises.push(this.investment.pause());
        }
        
        const txs = await Promise.all(promises);
        
        console.log("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...");
        const receipts = await Promise.all(txs.map(tx => tx.wait()));
        
        console.log("‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!");
        
        for (let i = 0; i < receipts.length; i++) {
            console.log(`Transaction ${i + 1}:`, receipts[i].blockNumber);
        }
        
        await this.logAction('EMERGENCY_PAUSE', {
            tokenPaused: !status.tokenPaused,
            investmentPaused: !status.investmentPaused,
            transactions: txs.map(tx => tx.hash)
        });
    }

    async emergencyUnpause() {
        console.log("\n‚ñ∂Ô∏è  –°–ù–Ø–¢–ò–ï –≠–ö–°–¢–†–ï–ù–ù–û–ô –ü–†–ò–û–°–¢–ê–ù–û–í–ö–ò");
        
        const status = await this.getSystemStatus();
        
        if (!status.tokenPaused && !status.investmentPaused) {
            console.log("‚ö†Ô∏è  –°–∏—Å—Ç–µ–º–∞ –Ω–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!");
            return;
        }
        
        console.log("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏!");
        
        const promises = [];
        
        if (status.tokenPaused) {
            console.log("–°–Ω—è—Ç–∏–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–æ–∫–µ–Ω–∞...");
            promises.push(this.token.unpause());
        }
        
        if (status.investmentPaused) {
            console.log("–°–Ω—è—Ç–∏–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π...");
            promises.push(this.investment.unpause());
        }
        
        const txs = await Promise.all(promises);
        
        console.log("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...");
        const receipts = await Promise.all(txs.map(tx => tx.wait()));
        
        console.log("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!");
        
        for (let i = 0; i < receipts.length; i++) {
            console.log(`Transaction ${i + 1}:`, receipts[i].blockNumber);
        }
        
        await this.logAction('EMERGENCY_UNPAUSE', {
            tokenUnpaused: status.tokenPaused,
            investmentUnpaused: status.investmentPaused,
            transactions: txs.map(tx => tx.hash)
        });
    }

    async emergencyWithdraw(recipient) {
        console.log("\nüí∞ –≠–ö–°–¢–†–ï–ù–ù–´–ô –í–´–í–û–î –°–†–ï–î–°–¢–í");
        
        if (!recipient) {
            console.error("‚ùå –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è:");
            console.error("npx hardhat run scripts/emergency-manager.js --network sepolia -- withdraw <address>");
            return;
        }
        
        if (!ethers.utils.isAddress(recipient)) {
            console.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è:", recipient);
            return;
        }
        
        const status = await this.getSystemStatus();
        
        console.log("Recipient:", recipient);
        console.log("ETH balance:", ethers.utils.formatEther(status.ethBalance), "ETH");
        console.log("Token balance:", ethers.utils.formatEther(status.tokenBalance), "DEFI");
        
        if (status.ethBalance.eq(0) && status.tokenBalance.eq(0)) {
            console.log("‚ö†Ô∏è  –ù–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞!");
            return;
        }
        
        console.log("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –≤—ã–≤–µ–¥–µ—Ç –í–°–ï —Å—Ä–µ–¥—Å—Ç–≤–∞ –∏–∑ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞!");
        
        const promises = [];
        
        if (status.ethBalance.gt(0)) {
            console.log("–í—ã–≤–æ–¥ ETH...");
            promises.push(this.investment.emergencyWithdraw(recipient));
        }
        
        if (status.tokenBalance.gt(0)) {
            console.log("–í—ã–≤–æ–¥ —Ç–æ–∫–µ–Ω–æ–≤...");
            promises.push(this.investment.emergencyWithdrawTokens(recipient, status.tokenBalance));
        }
        
        const txs = await Promise.all(promises);
        
        console.log("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...");
        const receipts = await Promise.all(txs.map(tx => tx.wait()));
        
        console.log("‚úÖ –°—Ä–µ–¥—Å—Ç–≤–∞ –≤—ã–≤–µ–¥–µ–Ω—ã!");
        
        for (let i = 0; i < receipts.length; i++) {
            console.log(`Transaction ${i + 1}:`, receipts[i].blockNumber);
        }
        
        await this.logAction('EMERGENCY_WITHDRAW', {
            recipient: recipient,
            ethAmount: ethers.utils.formatEther(status.ethBalance),
            tokenAmount: ethers.utils.formatEther(status.tokenBalance),
            transactions: txs.map(tx => tx.hash)
        });
    }

    async blacklistAddress(address, status) {
        console.log(`\nüö´ ${status ? '–î–û–ë–ê–í–õ–ï–ù–ò–ï –í' : '–£–î–ê–õ–ï–ù–ò–ï –ò–ó'} –ß–ï–†–ù–û–ì–û –°–ü–ò–°–ö–ê`);
        
        if (!address) {
            console.error("‚ùå –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å:");
            console.error("npx hardhat run scripts/emergency-manager.js --network sepolia -- blacklist <address> <true/false>");
            return;
        }
        
        if (!ethers.utils.isAddress(address)) {
            console.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å:", address);
            return;
        }
        
        console.log("Address:", address);
        console.log("Action:", status ? "BLACKLIST" : "UNBLACKLIST");
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        const tokenBlacklisted = await this.token.blacklisted(address);
        const investmentBlacklisted = await this.investment.blacklisted(address);
        
        console.log("Current token blacklist status:", tokenBlacklisted);
        console.log("Current investment blacklist status:", investmentBlacklisted);
        
        if (status && tokenBlacklisted && investmentBlacklisted) {
            console.log("‚ö†Ô∏è  –ê–¥—Ä–µ—Å —É–∂–µ –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ!");
            return;
        }
        
        if (!status && !tokenBlacklisted && !investmentBlacklisted) {
            console.log("‚ö†Ô∏è  –ê–¥—Ä–µ—Å –Ω–µ –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ!");
            return;
        }
        
        console.log("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –∏–∑–º–µ–Ω–∏—Ç —Å—Ç–∞—Ç—É—Å –∞–¥—Ä–µ—Å–∞ –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ!");
        
        const promises = [];
        
        if (tokenBlacklisted !== status) {
            console.log(`${status ? '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤' : '–£–¥–∞–ª–µ–Ω–∏–µ –∏–∑'} —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Ç–æ–∫–µ–Ω–∞...`);
            promises.push(this.token.setBlacklist(address, status));
        }
        
        if (investmentBlacklisted !== status) {
            console.log(`${status ? '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤' : '–£–¥–∞–ª–µ–Ω–∏–µ –∏–∑'} —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π...`);
            promises.push(this.investment.setBlacklist(address, status));
        }
        
        const txs = await Promise.all(promises);
        
        console.log("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...");
        const receipts = await Promise.all(txs.map(tx => tx.wait()));
        
        console.log("‚úÖ –°—Ç–∞—Ç—É—Å —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω!");
        
        for (let i = 0; i < receipts.length; i++) {
            console.log(`Transaction ${i + 1}:`, receipts[i].blockNumber);
        }
        
        await this.logAction('BLACKLIST_UPDATE', {
            address: address,
            status: status,
            tokenUpdated: tokenBlacklisted !== status,
            investmentUpdated: investmentBlacklisted !== status,
            transactions: txs.map(tx => tx.hash)
        });
    }

    async updatePrice(price) {
        console.log("\nüí± –û–ë–ù–û–í–õ–ï–ù–ò–ï –ö–£–†–°–ê ETH/USD");
        
        if (!price) {
            console.error("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É:");
            console.error("npx hardhat run scripts/emergency-manager.js --network sepolia -- price <price>");
            return;
        }
        
        const newPrice = parseFloat(price);
        if (isNaN(newPrice) || newPrice <= 0) {
            console.error("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞:", price);
            return;
        }
        
        const currentPrice = await this.investment.ethUsdPrice();
        const newPriceInCents = Math.round(newPrice * 100);
        
        console.log("Current price:", (currentPrice / 100).toFixed(2), "USD");
        console.log("New price:", newPrice.toFixed(2), "USD");
        
        const priceChange = ((newPriceInCents - currentPrice) * 100) / currentPrice;
        console.log("Price change:", priceChange.toFixed(2) + "%");
        
        if (Math.abs(priceChange) > 20) {
            console.log("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã (>20%)!");
        }
        
        console.log("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –æ–±–Ω–æ–≤–∏—Ç –∫—É—Ä—Å ETH/USD!");
        
        const tx = await this.investment.updateEthUsdPrice(newPriceInCents);
        console.log("Transaction hash:", tx.hash);
        
        console.log("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...");
        const receipt = await tx.wait();
        
        console.log("‚úÖ –ö—É—Ä—Å –æ–±–Ω–æ–≤–ª–µ–Ω!");
        console.log("Block number:", receipt.blockNumber);
        
        await this.logAction('PRICE_UPDATE', {
            oldPrice: currentPrice.toString(),
            newPrice: newPriceInCents.toString(),
            priceChange: priceChange.toFixed(2),
            transactionHash: tx.hash
        });
    }

    async logAction(action, data) {
        const logEntry = {
            timestamp: new Date().toISOString(),
            action: action,
            deployer: this.deployer.address,
            ...data
        };
        
        const logPath = path.join(__dirname, "..", "emergency-manager-logs.json");
        let logs = [];
        
        if (fs.existsSync(logPath)) {
            logs = JSON.parse(fs.readFileSync(logPath, "utf8"));
        }
        
        logs.push(logEntry);
        fs.writeFileSync(logPath, JSON.stringify(logs, null, 2));
        
        console.log("üìÑ –î–µ–π—Å—Ç–≤–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ emergency-manager-logs.json");
    }

    async showHelp() {
        console.log("\nüìñ –°–ü–†–ê–í–ö–ê –ü–û –≠–ö–°–¢–†–ï–ù–ù–û–ú–£ –ú–ï–ù–ï–î–ñ–ï–†–£");
        console.log("=".repeat(60));
        console.log("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:");
        console.log("");
        console.log("üìä status                    - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã");
        console.log("üõë pause                     - –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É");
        console.log("‚ñ∂Ô∏è  unpause                   - –°–Ω—è—Ç—å –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫—É");
        console.log("üí∞ withdraw <address>        - –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤");
        console.log("üö´ blacklist <address> <true/false> - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–Ω—ã–º —Å–ø–∏—Å–∫–æ–º");
        console.log("üí± price <price>             - –û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å ETH/USD");
        console.log("üìñ help                      - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É");
        console.log("");
        console.log("–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:");
        console.log("npx hardhat run scripts/emergency-manager.js --network sepolia -- status");
        console.log("npx hardhat run scripts/emergency-manager.js --network sepolia -- pause");
        console.log("npx hardhat run scripts/emergency-manager.js --network sepolia -- withdraw 0x...");
        console.log("npx hardhat run scripts/emergency-manager.js --network sepolia -- blacklist 0x... true");
        console.log("npx hardhat run scripts/emergency-manager.js --network sepolia -- price 2500");
    }
}

async function main() {
    const manager = new EmergencyManager();
    
    try {
        await manager.initialize();
        
        const command = process.argv[2];
        const arg1 = process.argv[3];
        const arg2 = process.argv[4];
        
        switch (command) {
            case 'status':
                await manager.getSystemStatus();
                break;
            case 'pause':
                await manager.emergencyPause();
                break;
            case 'unpause':
                await manager.emergencyUnpause();
                break;
            case 'withdraw':
                await manager.emergencyWithdraw(arg1);
                break;
            case 'blacklist':
                await manager.blacklistAddress(arg1, arg2 === 'true');
                break;
            case 'price':
                await manager.updatePrice(arg1);
                break;
            case 'help':
                await manager.showHelp();
                break;
            default:
                console.error("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞:", command);
                await manager.showHelp();
                process.exit(1);
        }
        
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –≤ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–º –º–µ–Ω–µ–¥–∂–µ—Ä–µ:", error);
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
if (require.main === module) {
    main()
        .then(() => process.exit(0))
        .catch((error) => {
            console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error);
            process.exit(1);
        });
}

module.exports = { EmergencyManager };
