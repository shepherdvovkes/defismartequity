const { ethers } = require("hardhat");
const fs = require("fs");
const path = require("path");

async function main() {
    // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    const targetAddress = process.argv[2];
    
    if (!targetAddress) {
        console.error("‚ùå –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫:");
        console.error("npx hardhat run scripts/emergency-blacklist.js --network sepolia -- 0x...");
        process.exit(1);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∞–¥—Ä–µ—Å–∞
    if (!ethers.utils.isAddress(targetAddress)) {
        console.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞:", targetAddress);
        process.exit(1);
    }
    
    console.log("üö® –≠–ö–°–¢–†–ï–ù–ù–û–ï –î–û–ë–ê–í–õ–ï–ù–ò–ï –í –ß–ï–†–ù–´–ô –°–ü–ò–°–û–ö DEFIMON V2");
    console.log("=".repeat(60));
    console.log("Target address:", targetAddress);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
    const contractsPath = path.join(__dirname, "..", "deployed-contracts-v2.json");
    if (!fs.existsSync(contractsPath)) {
        throw new Error("‚ùå –§–∞–π–ª deployed-contracts-v2.json –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }
    
    const contracts = JSON.parse(fs.readFileSync(contractsPath, "utf8"));
    
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç
    const [deployer] = await ethers.getSigners();
    console.log("Deployer:", deployer.address);
    console.log("Balance:", ethers.utils.formatEther(await deployer.getBalance()), "ETH");
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É —Ç–æ–∫–µ–Ω–∞
    const DefimonTokenV2 = await ethers.getContractFactory("DefimonTokenV2");
    const token = DefimonTokenV2.attach(contracts.defimonTokenV2);
    
    console.log("\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–µ:");
    console.log("Address:", contracts.defimonTokenV2);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∞–¥—Ä–µ—Å–∞
    const isBlacklisted = await token.blacklisted(targetAddress);
    console.log("Current blacklist status:", isBlacklisted);
    
    if (isBlacklisted) {
        console.log("‚ö†Ô∏è  –ê–¥—Ä–µ—Å —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ!");
        return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ
    const tokenInfo = await token.getTokenInfo();
    console.log("Token name:", tokenInfo.tokenName);
    console.log("Token symbol:", tokenInfo.tokenSymbol);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∞–¥—Ä–µ—Å–∞
    const balance = await token.balanceOf(targetAddress);
    console.log("Target address balance:", ethers.utils.formatEther(balance), "DEFI");
    
    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    console.log("\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä—É–µ—Ç –∞–¥—Ä–µ—Å!");
    console.log("–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –Ω–µ —Å–º–æ–∂–µ—Ç:");
    console.log("- –ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Ç–æ–∫–µ–Ω—ã");
    console.log("- –ü–æ–ª—É—á–∞—Ç—å —Ç–æ–∫–µ–Ω—ã");
    console.log("- –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è—Ö");
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
    console.log("\nüõë –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫...");
    const tx = await token.setBlacklist(targetAddress, true);
    console.log("Transaction hash:", tx.hash);
    
    // –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    console.log("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...");
    const receipt = await tx.wait();
    console.log("‚úÖ –ê–¥—Ä–µ—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫!");
    console.log("Block number:", receipt.blockNumber);
    console.log("Gas used:", receipt.gasUsed.toString());
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
    const newBlacklistStatus = await token.blacklisted(targetAddress);
    console.log("New blacklist status:", newBlacklistStatus);
    
    // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    const logEntry = {
        timestamp: new Date().toISOString(),
        action: "EMERGENCY_BLACKLIST",
        contract: contracts.defimonTokenV2,
        targetAddress: targetAddress,
        deployer: deployer.address,
        transactionHash: tx.hash,
        blockNumber: receipt.blockNumber,
        gasUsed: receipt.gasUsed.toString(),
        targetBalance: ethers.utils.formatEther(balance),
        reason: "Emergency security measure"
    };
    
    const logPath = path.join(__dirname, "..", "emergency-logs.json");
    let logs = [];
    
    if (fs.existsSync(logPath)) {
        logs = JSON.parse(fs.readFileSync(logPath, "utf8"));
    }
    
    logs.push(logEntry);
    fs.writeFileSync(logPath, JSON.stringify(logs, null, 2));
    
    console.log("\nüìÑ –î–µ–π—Å—Ç–≤–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ emergency-logs.json");
    
    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    console.log("\nüì¢ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:");
    console.log("1. –£–≤–µ–¥–æ–º–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏");
    console.log("2. –ü—Ä–æ–≤–µ–¥–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∞–¥—Ä–µ—Å–∞");
    console.log("3. –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏");
    console.log("4. –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –ø–ª–∞–Ω –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π");
    
    console.log("\nüîÑ –î–ª—è —Å–Ω—è—Ç–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:");
    console.log(`npx hardhat run scripts/emergency-unblacklist.js --network sepolia -- ${targetAddress}`);
    
    console.log("\nüìä –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:");
    console.log(`npx hardhat run scripts/check-blacklist-status.js --network sepolia -- ${targetAddress}`);
}

main()
    .then(() => process.exit(0))
    .catch((error) => {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫:", error);
        process.exit(1);
    });
