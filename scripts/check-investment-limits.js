const { ethers } = require("hardhat");
const fs = require("fs");
const path = require("path");

async function main() {
    console.log("–ü–†–û–í–ï–†–ö–ê –õ–ò–ú–ò–¢–û–í –ò–ù–í–ï–°–¢–ò–¶–ò–ô DEFIMON V2");
    console.log("=".repeat(60));
    
    // –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    const ethAmount = process.argv[2]; // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ETH –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
    const contractsPath = path.join(__dirname, "..", "deployed-contracts-v2.json");
    if (!fs.existsSync(contractsPath)) {
        throw new Error("‚ùå –§–∞–π–ª deployed-contracts-v2.json –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }
    
    const contracts = JSON.parse(fs.readFileSync(contractsPath, "utf8"));
    
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç
    const [deployer] = await ethers.getSigners();
    console.log("Deployer:", deployer.address);
    console.log("Balance:", ethers.utils.formatEther(await deployer.getBalance()), "ETH");
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
    const DefimonInvestmentV2 = await ethers.getContractFactory("DefimonInvestmentV2");
    const investment = DefimonInvestmentV2.attach(contracts.defimonInvestmentV2);
    
    console.log("\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ:");
    console.log("Address:", contracts.defimonInvestmentV2);
    
    // –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç—ã –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
    const limits = await investment.getInvestmentLimits();
    
    console.log("\n–õ–ò–ú–ò–¢–´ –ò–ù–í–ï–°–¢–ò–¶–ò–ô:");
    console.log("Min investment (USD):", limits.minInvestmentUsd.toString());
    console.log("Max investment (USD):", limits.maxInvestmentUsd.toString());
    console.log("Large investment threshold (USD):", limits.largeInvestmentUsd.toString());
    console.log("Current ETH/USD price:", limits.currentEthUsdPrice.toString(), "cents");
    console.log("Current ETH/USD price:", (limits.currentEthUsdPrice / 100).toFixed(2), "USD");
    
    console.log("\n–õ–ò–ú–ò–¢–´ –í ETH:");
    console.log("Min investment (ETH):", ethers.utils.formatEther(limits.minInvestmentEth));
    console.log("Max investment (ETH):", ethers.utils.formatEther(limits.maxInvestmentEth));
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è –∫—Ä—É–ø–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –≤ ETH
    const largeInvestmentEth = (limits.largeInvestmentUsd * 100 * 1e18) / limits.currentEthUsdPrice;
    console.log("Large investment threshold (ETH):", ethers.utils.formatEther(largeInvestmentEth));
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
    const coefficient = await investment.getCurrentCoefficient();
    console.log("\nüìà –¢–ï–ö–£–©–ò–ô –ö–û–≠–§–§–ò–¶–ò–ï–ù–¢:");
    console.log("Coefficient:", coefficient.coefficient.toString());
    console.log("Period:", coefficient.period.toString());
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥
    let periodName;
    switch (coefficient.period.toString()) {
        case '1':
            periodName = "MVP (x10)";
            break;
        case '2':
            periodName = "Release (x5)";
            break;
        case '3':
            periodName = "Standard (x1)";
            break;
        default:
            periodName = "Unknown";
    }
    console.log("Period name:", periodName);
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–∏–æ–¥–∞—Ö
    const periods = await investment.getInvestmentPeriods();
    console.log("\n‚è∞ –ü–ï–†–ò–û–î–´ –ò–ù–í–ï–°–¢–ò–¶–ò–ô:");
    console.log("MVP deadline:", new Date(periods.mvpDeadline * 1000).toISOString());
    console.log("Release deadline:", new Date(periods.releaseDeadline * 1000).toISOString());
    console.log("Current time:", new Date(periods.currentTime * 1000).toISOString());
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ —Å—É–º–º–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    if (ethAmount) {
        const testAmount = ethers.utils.parseEther(ethAmount);
        console.log(`\nüîç –ü–†–û–í–ï–†–ö–ê –°–£–ú–ú–´: ${ethAmount} ETH`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
        const [isWithinLimits, requiresApproval] = await investment.checkInvestmentLimits(testAmount);
        
        console.log("Within limits:", isWithinLimits ? "‚úÖ YES" : "‚ùå NO");
        console.log("Requires approval:", requiresApproval ? "‚úÖ YES" : "‚ùå NO");
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ USD
        const usdAmount = await investment.ethToUsd(testAmount);
        console.log("USD equivalent:", usdAmount.toString(), "cents ($" + (usdAmount / 100).toFixed(2) + ")");
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
        const tokenAmount = testAmount * 100 * coefficient.coefficient; // BASE_EXCHANGE_RATE * coefficient
        console.log("Token amount:", ethers.utils.formatEther(tokenAmount), "DEFI");
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏
        let investmentType;
        if (!isWithinLimits) {
            investmentType = "‚ùå REJECTED (Outside limits)";
        } else if (requiresApproval) {
            investmentType = "‚ö†Ô∏è  REQUIRES APPROVAL (Large investment)";
        } else {
            investmentType = "‚úÖ STANDARD (Normal investment)";
        }
        
        console.log("Investment type:", investmentType);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
        const tokenBalance = await investment.getTokenBalance();
        console.log("\nü™ô –ë–ê–õ–ê–ù–° –¢–û–ö–ï–ù–û–í –ö–û–ù–¢–†–ê–ö–¢–ê:");
        console.log("Available tokens:", ethers.utils.formatEther(tokenBalance), "DEFI");
        console.log("Sufficient for investment:", tokenBalance.gte(tokenAmount) ? "‚úÖ YES" : "‚ùå NO");
        
        if (!tokenBalance.gte(tokenAmount)) {
            console.log("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ!");
            console.log("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Ç–æ–∫–µ–Ω–∞–º–∏.");
        }
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
    const stats = await investment.getContractStats();
    console.log("\n–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–û–ù–¢–†–ê–ö–¢–ê:");
    console.log("Total investors:", stats.totalInvestors.toString());
    console.log("Contract balance:", ethers.utils.formatEther(stats.contractBalance), "ETH");
    console.log("Token balance:", ethers.utils.formatEther(stats.tokenBalance), "DEFI");
    console.log("Total tokens distributed:", ethers.utils.formatEther(stats.totalTokensDistributed), "DEFI");
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∞–Ω—Ç–∞—Ö
    const signers = await investment.getSigners();
    console.log("\nüë• –ü–û–î–ü–ò–°–ê–ù–¢–´ –ú–£–õ–¨–¢–ò–ü–û–î–ü–ò–°–ò:");
    console.log("Signer 1:", signers.signer1Address);
    console.log("Signer 2:", signers.signer2Address);
    console.log("Signer 3:", signers.signer3Address);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
    const requestCounter = await investment.getRequestCounter();
    console.log("\nüî¢ –°–ß–ï–¢–ß–ò–ö–ò:");
    console.log("Request counter:", requestCounter.toString());
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
    const isPaused = await investment.paused();
    console.log("\n‚è∏Ô∏è  –°–¢–ê–¢–£–° –ö–û–ù–¢–†–ê–ö–¢–ê:");
    console.log("Paused:", isPaused ? "üî¥ YES" : "üü¢ NO");
    
    // –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
    const report = {
        timestamp: new Date().toISOString(),
        limits: {
            minInvestmentUsd: limits.minInvestmentUsd.toString(),
            maxInvestmentUsd: limits.maxInvestmentUsd.toString(),
            largeInvestmentUsd: limits.largeInvestmentUsd.toString(),
            currentEthUsdPrice: limits.currentEthUsdPrice.toString(),
            minInvestmentEth: ethers.utils.formatEther(limits.minInvestmentEth),
            maxInvestmentEth: ethers.utils.formatEther(limits.maxInvestmentEth),
            largeInvestmentEth: ethers.utils.formatEther(largeInvestmentEth)
        },
        coefficient: {
            value: coefficient.coefficient.toString(),
            period: coefficient.period.toString(),
            periodName: periodName
        },
        periods: {
            mvpDeadline: new Date(periods.mvpDeadline * 1000).toISOString(),
            releaseDeadline: new Date(periods.releaseDeadline * 1000).toISOString(),
            currentTime: new Date(periods.currentTime * 1000).toISOString()
        },
        stats: {
            totalInvestors: stats.totalInvestors.toString(),
            contractBalance: ethers.utils.formatEther(stats.contractBalance),
            tokenBalance: ethers.utils.formatEther(stats.tokenBalance),
            totalTokensDistributed: ethers.utils.formatEther(stats.totalTokensDistributed)
        },
        signers: {
            signer1: signers.signer1Address,
            signer2: signers.signer2Address,
            signer3: signers.signer3Address
        },
        counters: {
            requestCounter: requestCounter.toString()
        },
        status: {
            paused: isPaused
        }
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—É–º–º—ã, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
    if (ethAmount) {
        const testAmount = ethers.utils.parseEther(ethAmount);
        const [isWithinLimits, requiresApproval] = await investment.checkInvestmentLimits(testAmount);
        const usdAmount = await investment.ethToUsd(testAmount);
        const tokenAmount = testAmount * 100 * coefficient.coefficient;
        const tokenBalance = await investment.getTokenBalance();
        
        report.testAmount = {
            ethAmount: ethAmount,
            usdAmount: usdAmount.toString(),
            usdAmountFormatted: (usdAmount / 100).toFixed(2),
            tokenAmount: ethers.utils.formatEther(tokenAmount),
            isWithinLimits: isWithinLimits,
            requiresApproval: requiresApproval,
            sufficientTokens: tokenBalance.gte(tokenAmount)
        };
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    const reportPath = path.join(__dirname, "..", "investment-limits-report.json");
    fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));
    console.log(`\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: ${reportPath}`);
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:");
    
    if (isPaused) {
        console.log("‚ö†Ô∏è  –ö–æ–Ω—Ç—Ä–∞–∫—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω—è—Ç—å –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫—É");
    }
    
    if (stats.tokenBalance.lt(ethers.utils.parseEther("1000000"))) { // –ú–µ–Ω—å—à–µ 1M —Ç–æ–∫–µ–Ω–æ–≤
        console.log("‚ö†Ô∏è  –ù–∏–∑–∫–∏–π –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤ - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ");
    }
    
    if (stats.contractBalance.lt(ethers.utils.parseEther("10"))) { // –ú–µ–Ω—å—à–µ 10 ETH
        console.log("‚ö†Ô∏è  –ù–∏–∑–∫–∏–π –±–∞–ª–∞–Ω—Å ETH - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ");
    }
    
    const currentTime = Math.floor(Date.now() / 1000);
    if (currentTime > periods.mvpDeadline && coefficient.period.toString() === '1') {
        console.log("‚ö†Ô∏è  MVP –ø–µ—Ä–∏–æ–¥ –∏—Å—Ç–µ–∫ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç");
    }
    
    if (currentTime > periods.releaseDeadline && coefficient.period.toString() === '2') {
        console.log("‚ö†Ô∏è  Release –ø–µ—Ä–∏–æ–¥ –∏—Å—Ç–µ–∫ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç");
    }
}

main()
    .then(() => process.exit(0))
    .catch((error) => {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ª–∏–º–∏—Ç–æ–≤:", error);
        process.exit(1);
    });
