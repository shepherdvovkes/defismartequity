const { ethers } = require("hardhat");
const fs = require("fs");
const path = require("path");

class AlertSystem {
    constructor() {
        this.contracts = null;
        this.provider = null;
        this.alertRules = [];
        this.notificationChannels = [];
        this.alertHistory = [];
    }

    async initialize() {
        console.log("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–ª–µ—Ä—Ç–æ–≤...");
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
        const contractsPath = path.join(__dirname, "..", "deployed-contracts-v2.json");
        if (!fs.existsSync(contractsPath)) {
            throw new Error("‚ùå –§–∞–π–ª deployed-contracts-v2.json –Ω–µ –Ω–∞–π–¥–µ–Ω");
        }
        
        this.contracts = JSON.parse(fs.readFileSync(contractsPath, "utf8"));
        
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        this.provider = new ethers.providers.JsonRpcProvider(
            process.env.SEPOLIA_RPC_URL || `https://sepolia.infura.io/v3/${process.env.INFURA_API_KEY}`
        );
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞ –∞–ª–µ—Ä—Ç–æ–≤
        this.setupAlertRules();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–∞–Ω–∞–ª—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        this.setupNotificationChannels();
        
        console.log("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∞–ª–µ—Ä—Ç–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞");
    }

    setupAlertRules() {
        this.alertRules = [
            {
                id: 'LARGE_TRANSFER',
                name: 'Large Token Transfer',
                description: 'Transfer of more than 1000 ETH worth of tokens',
                severity: 'HIGH',
                threshold: ethers.utils.parseEther('1000'),
                condition: (activity) => {
                    return activity.type === 'transfer' && 
                           ethers.BigNumber.from(activity.amount).gte(this.alertRules.find(r => r.id === 'LARGE_TRANSFER').threshold);
                },
                action: 'IMMEDIATE_NOTIFICATION'
            },
            {
                id: 'LARGE_INVESTMENT',
                name: 'Large Investment',
                description: 'Investment of more than 100 ETH',
                severity: 'HIGH',
                threshold: ethers.utils.parseEther('100'),
                condition: (activity) => {
                    return activity.type === 'investment' && 
                           ethers.BigNumber.from(activity.ethAmount).gte(this.alertRules.find(r => r.id === 'LARGE_INVESTMENT').threshold);
                },
                action: 'IMMEDIATE_NOTIFICATION'
            },
            {
                id: 'RAPID_TRANSACTIONS',
                name: 'Rapid Transactions',
                description: 'More than 10 transactions from same address in 1 hour',
                severity: 'MEDIUM',
                threshold: 10,
                condition: (activity, history) => {
                    const oneHourAgo = Math.floor(Date.now() / 1000) - 3600;
                    const recentTransactions = history.filter(h => 
                        h.timestamp >= oneHourAgo && 
                        (h.from === activity.from || h.to === activity.to)
                    );
                    return recentTransactions.length >= 10;
                },
                action: 'SCHEDULED_NOTIFICATION'
            },
            {
                id: 'BLACKLIST_VIOLATION',
                name: 'Blacklist Violation',
                description: 'Transaction involving blacklisted address',
                severity: 'CRITICAL',
                condition: async (activity) => {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
                    const DefimonTokenV2 = await ethers.getContractFactory("DefimonTokenV2");
                    const token = DefimonTokenV2.attach(this.contracts.defimonTokenV2);
                    
                    const fromBlacklisted = await token.blacklisted(activity.from);
                    const toBlacklisted = await token.blacklisted(activity.to);
                    
                    return fromBlacklisted || toBlacklisted;
                },
                action: 'EMERGENCY_ACTION'
            },
            {
                id: 'PAUSE_VIOLATION',
                name: 'Pause Violation',
                description: 'Transaction attempted while contract is paused',
                severity: 'CRITICAL',
                condition: async (activity) => {
                    const DefimonTokenV2 = await ethers.getContractFactory("DefimonTokenV2");
                    const DefimonInvestmentV2 = await ethers.getContractFactory("DefimonInvestmentV2");
                    
                    const token = DefimonTokenV2.attach(this.contracts.defimonTokenV2);
                    const investment = DefimonInvestmentV2.attach(this.contracts.defimonInvestmentV2);
                    
                    const tokenPaused = await token.paused();
                    const investmentPaused = await investment.paused();
                    
                    return tokenPaused || investmentPaused;
                },
                action: 'EMERGENCY_ACTION'
            },
            {
                id: 'UNUSUAL_PATTERN',
                name: 'Unusual Transaction Pattern',
                description: 'Unusual transaction pattern detected',
                severity: 'MEDIUM',
                condition: (activity, history) => {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–µ–æ–±—ã—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
                    const similarTransactions = history.filter(h => 
                        h.type === activity.type &&
                        h.amount === activity.amount &&
                        h.from === activity.from
                    );
                    
                    return similarTransactions.length >= 5;
                },
                action: 'SCHEDULED_NOTIFICATION'
            }
        ];
    }

    setupNotificationChannels() {
        this.notificationChannels = [
            {
                id: 'CONSOLE',
                name: 'Console Output',
                type: 'console',
                enabled: true,
                send: (alert) => {
                    console.log(`ALERT [${alert.severity}]: ${alert.rule.name}`);
                    console.log(`   Description: ${alert.rule.description}`);
                    console.log(`   Activity: ${JSON.stringify(alert.activity, null, 2)}`);
                    console.log(`   Time: ${alert.timestamp}`);
                }
            },
            {
                id: 'FILE',
                name: 'File Logging',
                type: 'file',
                enabled: true,
                send: (alert) => {
                    const logPath = path.join(__dirname, "..", "alert-log.json");
                    let logs = [];
                    
                    if (fs.existsSync(logPath)) {
                        logs = JSON.parse(fs.readFileSync(logPath, "utf8"));
                    }
                    
                    logs.push(alert);
                    fs.writeFileSync(logPath, JSON.stringify(logs, null, 2));
                }
            },
            {
                id: 'TELEGRAM',
                name: 'Telegram Bot',
                type: 'telegram',
                enabled: process.env.TELEGRAM_BOT_TOKEN && process.env.TELEGRAM_CHAT_ID,
                send: async (alert) => {
                    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
                    console.log("üì± Telegram notification sent");
                }
            },
            {
                id: 'EMAIL',
                name: 'Email Notification',
                type: 'email',
                enabled: process.env.SMTP_HOST && process.env.ALERT_EMAIL,
                send: async (alert) => {
                    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email
                    console.log("üìß Email notification sent");
                }
            }
        ];
    }

    async processActivity(activity) {
        console.log(`üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${activity.type}`);
        
        for (const rule of this.alertRules) {
            try {
                let shouldAlert = false;
                
                if (typeof rule.condition === 'function') {
                    if (rule.condition.length === 1) {
                        shouldAlert = await rule.condition(activity);
                    } else {
                        shouldAlert = await rule.condition(activity, this.alertHistory);
                    }
                }
                
                if (shouldAlert) {
                    await this.triggerAlert(rule, activity);
                }
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤–∏–ª–∞ ${rule.id}:`, error);
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏—é
        this.alertHistory.push({
            ...activity,
            processedAt: new Date().toISOString()
        });
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 –∑–∞–ø–∏—Å–µ–π)
        if (this.alertHistory.length > 1000) {
            this.alertHistory = this.alertHistory.slice(-1000);
        }
    }

    async triggerAlert(rule, activity) {
        const alert = {
            id: ethers.utils.id(JSON.stringify({ rule: rule.id, activity, timestamp: Date.now() })),
            rule: rule,
            activity: activity,
            timestamp: new Date().toISOString(),
            severity: rule.severity,
            action: rule.action
        };
        
                    console.log(`–°—Ä–∞–±–æ—Ç–∞–ª –∞–ª–µ—Ä—Ç: ${rule.name}`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        await this.sendNotifications(alert);
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è
        await this.executeAction(alert);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–ª–µ—Ä—Ç
        await this.saveAlert(alert);
    }

    async sendNotifications(alert) {
        for (const channel of this.notificationChannels) {
            if (channel.enabled) {
                try {
                    await channel.send(alert);
                } catch (error) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ ${channel.name}:`, error);
                }
            }
        }
    }

    async executeAction(alert) {
        switch (alert.action) {
            case 'IMMEDIATE_NOTIFICATION':
                console.log("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ");
                break;
                
            case 'SCHEDULED_NOTIFICATION':
                console.log("üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ");
                break;
                
            case 'EMERGENCY_ACTION':
                console.log("–í–´–ü–û–õ–ù–Ø–ï–¢–°–Ø –≠–ö–°–¢–†–ï–ù–ù–û–ï –î–ï–ô–°–¢–í–ò–ï!");
                await this.executeEmergencyAction(alert);
                break;
                
            default:
                console.log("‚ÑπÔ∏è  –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ");
        }
    }

    async executeEmergencyAction(alert) {
                    console.log("–≠–ö–°–¢–†–ï–ù–ù–û–ï –î–ï–ô–°–¢–í–ò–ï:");
        
        if (alert.rule.id === 'BLACKLIST_VIOLATION') {
            console.log("   - –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∞–¥—Ä–µ—Å–∞ –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ");
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        }
        
        if (alert.rule.id === 'PAUSE_VIOLATION') {
            console.log("   - –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞");
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫—É
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        console.log("   - –û—Ç–ø—Ä–∞–≤–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π");
    }

    async saveAlert(alert) {
        const alertsPath = path.join(__dirname, "..", "security-alerts.json");
        let alerts = [];
        
        if (fs.existsSync(alertsPath)) {
            alerts = JSON.parse(fs.readFileSync(alertsPath, "utf8"));
        }
        
        alerts.push(alert);
        fs.writeFileSync(alertsPath, JSON.stringify(alerts, null, 2));
    }

    async generateAlertReport() {
        console.log("\n–û–¢–ß–ï–¢ –ü–û –ê–õ–ï–†–¢–ê–ú");
        console.log("=".repeat(50));
        
        const alertsPath = path.join(__dirname, "..", "security-alerts.json");
        if (!fs.existsSync(alertsPath)) {
            console.log("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–ª–µ—Ä—Ç–∞—Ö");
            return;
        }
        
        const alerts = JSON.parse(fs.readFileSync(alertsPath, "utf8"));
        const last24Hours = alerts.filter(alert => 
            new Date(alert.timestamp) >= new Date(Date.now() - 86400000)
        );
        
        console.log(`–í—Å–µ–≥–æ –∞–ª–µ—Ä—Ç–æ–≤ –∑–∞ 24 —á–∞—Å–∞: ${last24Hours.length}`);
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏
        const severityStats = {};
        last24Hours.forEach(alert => {
            severityStats[alert.severity] = (severityStats[alert.severity] || 0) + 1;
        });
        
        console.log("\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏:");
        Object.entries(severityStats).forEach(([severity, count]) => {
            console.log(`  ${severity}: ${count}`);
        });
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
        const typeStats = {};
        last24Hours.forEach(alert => {
            typeStats[alert.rule.id] = (typeStats[alert.rule.id] || 0) + 1;
        });
        
        console.log("\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º:");
        Object.entries(typeStats).forEach(([type, count]) => {
            console.log(`  ${type}: ${count}`);
        });
    }

    async run() {
        try {
            await this.initialize();
            await this.generateAlertReport();
            
            console.log("\n‚úÖ –°–∏—Å—Ç–µ–º–∞ –∞–ª–µ—Ä—Ç–æ–≤ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ");
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –∞–ª–µ—Ä—Ç–æ–≤:", error);
        }
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É –∞–ª–µ—Ä—Ç–æ–≤
if (require.main === module) {
    const alertSystem = new AlertSystem();
    alertSystem.run();
}

module.exports = { AlertSystem };
